package com.freshdirect.fdstore.content;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import javax.servlet.jsp.JspException;

import junit.framework.TestCase;

import org.apache.commons.lang.StringUtils;

import com.freshdirect.cms.ContentKey;
import com.freshdirect.cms.application.CmsManager;
import com.freshdirect.cms.application.ContentServiceI;
import com.freshdirect.cms.application.ContentTypeServiceI;
import com.freshdirect.cms.application.service.CompositeTypeService;
import com.freshdirect.cms.application.service.xml.FlexContentHandler;
import com.freshdirect.cms.application.service.xml.XmlContentService;
import com.freshdirect.cms.application.service.xml.XmlTypeService;
import com.freshdirect.cms.fdstore.FDContentTypes;
import com.freshdirect.fdstore.content.ContentNodeTree.NodeIterator;
import com.freshdirect.fdstore.content.ContentNodeTree.TreeElement;
import com.freshdirect.fdstore.util.SearchNavigator;

/**
 * This test needs com/freshdirect/cms/fdstore/content/FilteredStore.xml.gz which is generated by
 * com.freshdirect.cms.core.ContentFilterTool
 * 
 * @author zsombor
 * 
 */
public class ContentTreeTest extends TestCase {
	private ContentServiceI service;

	public void setUp() throws Exception {
		super.setUp();

		List<ContentTypeServiceI> list = new ArrayList<ContentTypeServiceI>();
		list.add(new XmlTypeService("classpath:/com/freshdirect/cms/resource/CMSStoreDef.xml"));

		CompositeTypeService typeService = new CompositeTypeService(list);

		// This file is generated by com.freshdirect.cms.core.ContentFilterTool
		service = new XmlContentService(typeService, new FlexContentHandler(),
				"classpath:/com/freshdirect/cms/fdstore/content/FilteredStore.xml");

		CmsManager.setInstance(new CmsManager(service, null));

	}

	public void testMilkSearch() {
		List<ProductModel> products = getProductNodes("dai_organi_2_milk_02, dai_organi_1_milk_01, dai_orgval_whlmilk_01, cfncndy_ash_mcrrd, dai_orgval_laclfmilkhlf,"
				+ "dai_orgval_laclfmilkqt, dai_farm_whl_milk_04, dai_nsqare_skim_hg, gro_carn_milk_01, dai_nestle_chocolat_01, dai_organi_nonfat_m_02, dai_nsqare_mlk_hg,"
				+ "gro_goya_coconut_01, dai_farm_wmilkpaper_01, spe_roland_orgcocomilk, dai_nsqare_chcmlk, hba_phillips_mom_01, spe_tasthai_cocmlk, dai_lactaid_oneper, "
				+ "dai_farm_1milkpaper_01, hba_phillips_mom_02, gro_parmalat_white_wh_01, dai_hers_ffchoc, dai_hers_twochcmlk_02, gro_parmalat_white_2_01, gro_parmalat_banan_01, "
				+ "gro_parmalat_straw_01, gro_parmalat_vanil_01, gro_carnat_evaporat_02, gro_parmalat_white_wh_02, gro_parmalat_white_sk_01, dai_farm_2milkpaper_01, "
				+ "dai_farm_fat_milk_01, dai_farm_0milkpaper_01, spe_honees_milk, gro_parmalat_chocolat_01, gro_parmalat_slamvan, dai_orgval_chochlf, gro_parmalat_white_1_01, "
				+ "gro_parmalat_white_2_02, dai_farm_special_1_02, dai_farm_skimplus_02, gro_parmalat_org_01, gro_eagle_borden_01, dai_farm_skimplus_01, gro_parmalat_slamstraw, "
				+ "gro_swiss_milk_cho_01, spe_feod_mlkhzl_01, spe_tasthai_ltcocmlk, gro_carnat_lowfat_e_01, dai_farm_special_1_01, gro_carnat_fat_free_01, dai_rich_lacfremlk, "
				+ "dai_rich_lacfreskm, gro_swiss_milk_cho_02, fro_dove_bar_vanilla_02, spe_feod_mlkalm_01, dai_polly_o_regular_01, dai_polly_o_mozzarel_01, dai_nsqare_rfmlk_hg, "
				+ "dai_polly_o_whole_mi_01, fro_godiva_chocolat_01, gro_milkbone_medium_r_01, dai_lactaid_100_lact_01, fro_david_mousse_01, spe_bahlsen_afrika_m_01, spe_ritter_msalm, "
				+ "gro_alprose_mlkchoc, gro_ovaltine_chocolat_01, spe_vivani_mlkchc, spe_guit_mlkchps, gro_tollho_nestle_03, gro_nestle_chocolat_01, spe_ritter_alp, "
				+ "spe_carrs_mchocteabis_01, ckibni_pecmilk, cfncndy_ash_mcprtz, cfncndy_ash_mcbrk, cfncndy_ash_mcchry, dai_total_whyog_01, spe_ritter_mcras, dai_lactaid_01, "
				+ "spe_ritter_mchaz, spe_bahlsen_fcmchc, spe_ritter_mcpra, spe_lu_ecmlkchc, dai_total_whyog_02, hba_viactiv_mlk_chc, gro_enfamil_powder_m_02, spe_clu_milkbar, "
				+ "spe_ritter_mccrnflk, spe_vivani_mlkchcpr, gro_mrsfields_chcchp, dai_total_greek_sh_01, cfncndy_ash_mcvmar, dai_polly_o_shredded_01, gro_kellogg_coco_cs, "
				+ "dai_lactaid_nonfat_m_01, spe_ritter_mcrum, cfncndy_ash_mcgrah, dai_catham_mapyog, dai_total_honyog, gro_carnat_good_sta_02, dai_catham_shepyog, "
				+ "gro_purina_cat_chow_01, fro_haagen_vanilla_11, gro_duncan_homestyl_02, gro_alprose_bitchoc, gro_kellogg_ffcinn_cs, gro_pfarm_saus, gro_carnat_good_sta_03, "
				+ "dai_vita_soy_plain_so_01, dai_vita_soy_chocolat_02, dai_vita_soy_original_01, dai_vita_soy_chocolat_01, dai_farm_buttermilk_01, gro_westsoy_rice_bev_01, "
				+ "gro_westsoy_westbrae_01, gro_westsoy_drink_va_01, gro_westsoy_lite_pla_01, gro_westsoy_drink_pl_01, gro_westsoy_plus_pla_01, gro_westsoy_lite_van_01, "
				+ "gro_westsoy_van_shak_01, gro_westsoy_cho_shk_01, gro_westsoy_west_soy_01, gro_westsoy_unsweete_01, gro_westsoy_nonfat_p_01, gro_westsoy_plus_van_01");

		assertEquals("product list size", 129, products.size());

		SearchNavigator nav = SearchNavigator.mock("milk", null, SearchNavigator.VIEW_DEFAULT, null, null, null, null, 0, 0,
				SearchSortType.BY_NAME, true, false, false);
		MockedProductPagerTag search = new MockedProductPagerTag(nav, null);
		search.setProducts(products);
		try {
			search.doStartTag();
		} catch (JspException e) {
			fail();
		}

		assertEquals("sort by name", "spe_tasthai_cocmlk,spe_tasthai_ltcocmlk,gro_alprose_bitchoc,gro_alprose_mlkchoc", getKeys(
				search.getPageProducts(), 4));
		assertEquals("sort by name", "A Taste Of Thai Coconut Milk," + "A Taste Of Thai Lite Coconut Milk,"
				+ "Alprose Napolitains Miniature Bite-Size Assorted Milk Chocolates," + "Alprose Swiss Milk Chocolate Bar",
				getFullNames(search.getPageProducts(), 4));

		nav = SearchNavigator.mock("milk", null, SearchNavigator.VIEW_DEFAULT, null, "dai_milk_milk", null, null, 0, 0,
				SearchSortType.BY_NAME, true, false, false);
		search = new MockedProductPagerTag(nav, null);
		search.setProducts(products);
		try {
			search.doStartTag();
		} catch (JspException e) {
			fail();
		}

		assertEquals("filtered product list size for category 'dai_milk_milk'", 29, search.getPageProducts().size());
		assertEquals("sort by name", "dai_farm_1milkpaper_01,dai_farm_2milkpaper_01,dai_farm_0milkpaper_01,dai_farm_fat_milk_01",
				getKeys(search.getPageProducts(), 4));
		assertEquals("sort by name", "Farmland Antibiotic-Free 1% Lowfat Milk," + "Farmland Antibiotic-Free 2% Reduced Fat Milk,"
				+ "Farmland Antibiotic-Free Fat Free Milk," + "Farmland Antibiotic-Free Fat Free Milk", getFullNames(search
				.getPageProducts(), 4));

		nav = SearchNavigator.mock("milk", null, SearchNavigator.VIEW_DEFAULT, null, null, "bd_old_chatham", null, 0, 0,
				SearchSortType.BY_NAME, true, false, false);
		search = new MockedProductPagerTag(nav, null);
		search.setProducts(products);
		try {
			search.doStartTag();
		} catch (JspException e) {
			fail();
		}

		assertEquals("filtered product list size for brand 'bd_old_chatham'", 2, search.getPageProducts().size());
		assertEquals("sort by name", "dai_catham_mapyog,dai_catham_shepyog", getKeys(search.getPageProducts(), 4));
		assertEquals("sort by name", "Old Chatham Hudson Valley Maple Sheep's Milk Yogurt,"
				+ "Old Chatham Hudson Valley Unflavored Sheep's Milk Yogurt", getFullNames(search.getPageProducts(), 4));

		nav = SearchNavigator.mock("milk", null, SearchNavigator.VIEW_DEFAULT, null, null, null, null, 0, 0,
				SearchSortType.BY_NAME, true, false, false);
		search = new MockedProductPagerTag(nav, null);
		search.setProducts(products);
		try {
			search.doStartTag();
		} catch (JspException e) {
			fail();
		}
		CategoryNodeTree categoryTree = search.getCategoryTree();

		assertEquals("root size", 8, categoryTree.getRoots().size());
		assertEquals("root node names", "Dairy,Bakery,Organic & All-Natural,Our Picks,Grocery,Health & Beauty,Buy Big,Frozen",
				getFullNames(categoryTree.getRoots(), 8));
		TreeElement firstElement = (TreeElement) categoryTree.getRoots().iterator().next();

		NodeIterator iterator = categoryTree.iterator(new ContentNodeTree.TreeElementFilter() {
			public boolean accept(TreeElement element) {
				return element.getModel() instanceof CategoryModel || element.getModel() instanceof DepartmentModel;
			}
		}, false);

		assertEquals("first element depth", 0, firstElement.getDepth());
		assertEquals("first element has children", 39, firstElement.getChildCount());
		int i = 0;
		int sum = 0;
		for (Iterator<TreeElement> iter = firstElement.getChildren().iterator(); iter.hasNext();) {
			TreeElement child = iter.next();
			assertEquals("child depth " + i, 1, child.getDepth());
			sum += child.getChildCount();
		}
		assertEquals("first level child has the same number of childcount", 39, sum);

		// department
		check(iterator, DepartmentModel.class, "Dairy", 1, 0, 39);
		// first level
		check(iterator, CategoryModel.class, "Cheese", 2, 1, 4);
		// 2nd level
		check(iterator, CategoryModel.class, "Blocks", 3, 2, 2);
		check(iterator, CategoryModel.class, "Ricotta & Fresh", 4, 2, 1);
		check(iterator, CategoryModel.class, "Shredded & Grated", 5, 2, 1);
		// 3th level
		// check(iterator, CategoryModel.class, "Polly-O Whole Milk Mozzarella Cheese", 3, 3, 1);

		check(iterator, CategoryModel.class, "Milk & Cream", 3, 1, 29);
		check(iterator, CategoryModel.class, "Milk", 4, 2, 29);
		/*
		 * check(iterator, CategoryModel.class, "Yogurt", 3, 1, 1); check(iterator, DepartmentModel.class, "Bakery", 1, 0, 39);
		 */
	}

	private void check(NodeIterator iterator, Class<?> cls, String fullName, int pos, int depth, int childCount) {
		TreeElement object = (TreeElement) iterator.next();
		assertEquals("node[" + pos + "]:name", fullName, object.getModel().getFullName());
		assertEquals("node[" + pos + "]:class", cls, object.getModel().getClass());
		assertEquals("node[" + pos + "]:depth", depth, object.getDepth());
		assertEquals("node[" + pos + "]:childcount", childCount, object.getChildCount());
	}

	private String getKeys(List<ProductModel> result, int length) {
		StringBuffer b = new StringBuffer();
		for (int i = 0; i < result.size() && i < length; i++) {
			ContentNodeModel node = result.get(i);
			if (i > 0) {
				b.append(',');
			}
			b.append(node.getContentKey().getId());
		}
		return b.toString();
	}

	private String getFullNames(List<ProductModel> result, int length) {
		StringBuffer b = new StringBuffer();
		for (int i = 0; i < result.size() && i < length; i++) {
			ContentNodeModel node = (ContentNodeModel) result.get(i);
			if (i > 0) {
				b.append(',');
			}
			b.append(node.getFullName());
		}
		return b.toString();
	}

	private String getFullNames(Set<TreeElement> result, int length) {
		StringBuffer b = new StringBuffer();
		int i = 0;
		for (Iterator<TreeElement> iter = result.iterator(); iter.hasNext() && i < length; i++) {
			Object obj = iter.next();
			ContentNodeModel node = null;
			if (obj instanceof TreeElement) {
				node = ((TreeElement) obj).getModel();
			} else if (obj instanceof ContentNodeModel) {
				node = (ContentNodeModel) obj;
			}
			if (i > 0) {
				b.append(',');
			}
			b.append(node.getFullName());
		}
		return b.toString();
	}

	private List<ProductModel> getProductNodes(String keys) {
		String[] strings = StringUtils.split(keys, ',');
		ArrayList<ProductModel> result = new ArrayList<ProductModel>(strings.length);
		for (int i = 0; i < strings.length; i++) {
			ProductModel node = (ProductModel) ContentFactory.getInstance().getContentNodeByKey(
					ContentKey.getContentKey(FDContentTypes.PRODUCT, strings[i].trim()));
			if (node != null) {
				result.add(node);
			}
		}
		return result;
	}

}
