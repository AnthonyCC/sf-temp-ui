/*
 * BMUtil.java
 *
 * Created on October 12, 2001, 11:22 AM
 */

package com.freshdirect.webapp.util;

import java.io.*;
import java.util.*;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.sax.SAXSource;
import javax.xml.transform.stream.StreamResult;

import org.apache.log4j.*;
import org.xml.sax.*;
import org.xml.sax.helpers.AttributesImpl;

import com.freshdirect.framework.util.log.LoggerFactory;

/**
 *
 * @author  mrose
 * @version
 */
public class FDXmlUtil {

	private final static Category LOGGER = LoggerFactory.getInstance( FDXmlUtil.class );
	private static FDXmlParser saxReader = new FDXmlParser();


	/**
	 * Calls toXml() and passes the customerInfo root element.
	 *
	 */
	public static String buildCustomerXML(HashMap map) {
		return toXml(map, "customerInfo");
	}


	/**
	 * Calls toXml() and passes the customerInfo root element.
	 *
	 */
	public static String buildCaseXML(HashMap map) {
		return "blank for now";
	}


    /**
     * Converts a HashMap to a well-formed XML document.
     *
     * @param HashMap containing name/value pairs for xml elements and their values.
     * @param String defines what the root element of the resulting xml packet will be.
     * @return String the resulting xml packet.
     */
    private static String toXml(HashMap map, String rootElement) {

		// Create a buffer to hold the raw data
		StringBuffer data = new StringBuffer();

		// Iterate through the map and add raw data to buffer
		Set mapKeys = map.keySet();
		Iterator it = mapKeys.iterator();
		while ( it.hasNext() ) {
			String key = (String) it.next();
			data.append( key );
			data.append( ": " );
			data.append( map.get(key) );
			data.append("\n");
		}

		//
		// Make sure to set the correct root element for the resulting xml packet
		//
		saxReader.setRootElement(rootElement);

        // Create the sax "parser"
        try {
            // Use a Transformer for output
            TransformerFactory tFactory = TransformerFactory.newInstance();
            Transformer transformer = tFactory.newTransformer();

            // Use the parser as a SAX source for input
            InputSource inputSource = new InputSource( new StringReader( data.toString() ) );
            SAXSource source = new SAXSource(saxReader, inputSource);

            // send result to StringWriter
            StringWriter writer = new StringWriter();
            StreamResult result = new StreamResult(writer);
            transformer.transform(source, result);

            return ( result.getWriter().toString() );

        } catch (TransformerConfigurationException tce) {
           // Error generated by the parser
           LOGGER.debug("\n** Transformer Factory error");
           LOGGER.debug("   " + tce.getMessage() );

           // Use the contained exception, if any
           Throwable x = tce;
           if (tce.getException() != null)
               x = tce.getException();
           x.printStackTrace();

        } catch (TransformerException te) {
           // Error generated by the parser
           LOGGER.debug("\n** Transformation error");
           LOGGER.debug("   " + te.getMessage() );

           // Use the contained exception, if any
           Throwable x = te;
           if (te.getException() != null)
               x = te.getException();
           x.printStackTrace();

        }

        return (null);
    }



	protected static class FDXmlParser implements XMLReader {

	    org.xml.sax.ContentHandler handler;

	    // We're not doing namespaces, and we have no attributes on our elements.
	    String nsu = "";  // NamespaceURI
	    Attributes atts = new AttributesImpl();
	    String rootElement = "customerInfo";

	    //String indent = "\n    "; // for readability
	    String indent = "";

	    /** Allows for overriding of default root element for the resulting xml packet.*/
	    public void setRootElement(String s) {
			this.rootElement = s;
		}


	    /** Parse the input */
	    public void parse(InputSource input) throws IOException, SAXException {
	        try {
	            java.io.Reader r = input.getCharacterStream();

	            BufferedReader br = new BufferedReader(r);

	            // Read the file and display its contents.
	            String line = br.readLine();

	            if (handler==null) {
					throw new SAXException("No content handler");
				}
				handler.startDocument();
	        	handler.startElement(nsu, rootElement, rootElement, atts);

	        	while (line != null) {
					output(line);
					line = br.readLine();
				}

	            handler.ignorableWhitespace("\n".toCharArray(), 0, 1);
				handler.endElement(nsu, rootElement, rootElement);
	        	handler.endDocument();

	        }
	        catch (Exception e) {
	            e.printStackTrace();
	        }
	    } // method parse



	    /**
	     * @param String contains the line to be transformed into and XML element
	     */
	    void output(String line) throws SAXException {

			int separatorIndex = line.indexOf(":");
			int startIndex = separatorIndex+2;
			int textLength = line.length() - startIndex;

			String label = line.substring(0, separatorIndex);
			//String value = line.substring(separatorIndex+1, line.length());

			handler.ignorableWhitespace(indent.toCharArray(), 0, indent.length());
			handler.startElement(nsu, label, label, atts);
			handler.characters(line.toCharArray(),
		                       startIndex,
		                       textLength);
			handler.endElement(nsu, label, label);

		} // method output


		/** Allow an application to register a content event handler. */
		public void setContentHandler(org.xml.sax.ContentHandler handler) {	this.handler = handler;	}

		/** Return the current content handler. */
		public org.xml.sax.ContentHandler getContentHandler() {	return this.handler;}

		/** Allow an application to register an error event handler. */
		public void setErrorHandler(ErrorHandler handler){ }

		/** Return the current error handler. */
		public ErrorHandler getErrorHandler() { return null; }

		/** Parse an XML document from a system identifier (URI). */
		public void parse(String systemId) throws IOException, SAXException	{ }

		/** Return the current DTD handler. */
		public DTDHandler getDTDHandler() { return null; }

		/** Return the current entity resolver. */
		public EntityResolver getEntityResolver() { return null; }

		/** Allow an application to register an entity resolver. */
		public void setEntityResolver(EntityResolver resolver) { }

		/** Allow an application to register a DTD event handler. */
		public void setDTDHandler(DTDHandler handler) { }

		/** Look up the value of a property. */
		public Object getProperty(java.lang.String name) { return null; }

		/** Set the value of a property. */
		public void setProperty(java.lang.String name, java.lang.Object value) { }

		/** Set the state of a feature. */
		public void setFeature(java.lang.String name, boolean value) { }

		/** Look up the value of a feature. */
		public boolean getFeature(java.lang.String name) { return false; }

	} // inner class FDXmlParser

} // FDXmlUtil
