<%@ taglib uri='freshdirect' prefix='fd' %>
<%

	if (myDebugPrint) { out.println("<style>.myDebug { font-family: monospace; color: #0c0; background-color: #000; width: 725px; word-wrap: break-word; white-space: -moz-pre-wrap; white-space: pre-wrap; text-align: left; }</style>"); }

	//check for config
	if (strDynRows.toLowerCase().indexOf("useconfig:") > -1) {

		myDebugStr = "PAGE config: config found!";
			log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }

		String[] resultConfig = strDynRows.split(":");
		DomainValue configTest = null;

		//make sure we get an actual DomainValue
		try {
			
			myDebugStr = "PAGE config: using domainValueId: "+resultConfig[1];
				log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }

			configTest=ContentFactory.getInstance().getDomainValueById(resultConfig[1]);

			//log(myDebug, "PAGE config: config.getLabel()="+configTest.getLabel());
			myDebugStr = "PAGE config: Using config: "+configTest.getLabel();
				log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
			myDebugStr = "PAGE config: config.getTheValue()="+configTest.getTheValue();
				log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }

			strDynRows = configTest.getTheValue();
		}catch(Exception e){
			
			myDebugStr = "PAGE config: EXCEPTION: "+e;
				log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
			myDebugStr = "PAGE config: DomainValue has an ERROR. Check fdstore.properties file.";
				log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }

		}
		
	}

	myDebugStr = "PAGE property: "+strDynRows;
		log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }

	//if there are rows, use them
	if (strDynRows !=null && !"".equals(strDynRows)) { %>

			<fd:FDShoppingCart id='cart' action='addMultipleToCart' result='result' successPage='<%= successPage %>' source='<%= request.getParameter("fdsc.source")%>'>
				<% //START error messaging %>
				<fd:ErrorHandler result='<%=result%>' name='quantity' id='errorMsg'>
					<img src="/media_stat/images/layout/clear.gif" width="20" height="12" alt="" border="0">
					<%@ include file="/includes/i_error_messages.jspf" %>
				</fd:ErrorHandler>
				<% //END error messaging %>
	<%
		String curRow = ""; //holds current row
		String[] resultDynRows = strDynRows.split(",");

		for (int rowId=0; rowId<resultDynRows.length; rowId++) {
			//reset defaults so each attribute starts clean
				if (!emailPage) { isTransactionalRow = true; }else{ isTransactionalRow = false; }
				minForRowVisibility = 0;
				MIN_FAVS2SHOW = 1;
				perRow = emailPage ? 5 : 8; //used in generic_row
				perRowPP = emailPage ? 5 : 8; //used in peak_produce
				maxRows = 1; //used in generic_row
				grabberDepth = 0;
				dealsFrom = "gro";
				showInContextOf = null;
				dealsOnly = false;
				featuredOnly = false;
				showDescrips = true;
				sortBy = "";
				layoutSettings = new Settings(); //start clean
				add = "";
				exFro = false;
				exPer = false;
				newOnly = false;
				bisOnly = false;
				igShowCh = false;
				retHidFolds = false;
				retSecFolds = false;
				exDisc = true;
				showNewText = true;
				catId = null; //clear here so showInContextOf doesn't get set in following row

			//get current row
			curRow=resultDynRows[rowId];
			currentFolder = ContentFactory.getInstance().getContentNode(curRow);
			if(currentFolder instanceof CategoryModel) {
				if(curRow.indexOf("picks_love")>-1 && (null!=((CategoryModel)currentFolder).getProductPromotionType() &&ContentFactory.getInstance().isEligibleForDDPP())){
					curRow.replace("picks_love","picks_pres");
				}
			}
			try {
				//check for attributes
				if (curRow.indexOf(":") > 0) { //zero since it can't START with a colon (correctly)

					
					//log(myDebug, "found colon: ");
					String[] resultSub = curRow.split(":"); //found sub attrs

					//now reset curRow
					if (!"".equals(resultSub[0])) {
						curRow=resultSub[0];

						myDebugStr = "found curRow: "+curRow;
							log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }

					}

					if(resultSub.length>1){

						myDebugStr =  "found additional resultSubs: "+(resultSub.length-1); //-1 since the first var is the catId
							log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }


						for (int rowSubAtr=1; rowSubAtr<resultSub.length; rowSubAtr++) {
							if (resultSub[rowSubAtr].indexOf("=") > 0) {

								myDebugStr = "found key=val pair: "+resultSub[rowSubAtr];
									log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }

								String[] resultSubSub = resultSub[rowSubAtr].split("=");

								/* Add new KEY=VALUE pairs here */
								if ("isTx".equalsIgnoreCase(resultSubSub[0])) {
									/* this allows isTx email=true overriding */

									myDebugStr = "found isTx: "+resultSubSub[1]+", emailPage: "+emailPage;
									log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }

										if ("true".equalsIgnoreCase(resultSubSub[1])) {
											isTransactionalRow = true;
											if (!pricingScriptIncluded) {
												//javascript required for transactional
												%><fd:javascript src="/assets/javascript/pricing.js"/><%
												pricingScriptIncluded = true;
											}
										}
										if ("false".equalsIgnoreCase(resultSubSub[1])) {isTransactionalRow = false;}
								}else if ("min".equalsIgnoreCase(resultSubSub[0])) {
									myDebugStr = "found min: "+Integer.parseInt(resultSubSub[1]);
									log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
										minForRowVisibility = Integer.parseInt(resultSubSub[1]);
										if (minForRowVisibility > 0) { MIN_FAVS2SHOW = minForRowVisibility; }
								}else if ("perRow".equalsIgnoreCase(resultSubSub[0])) {
									myDebugStr = "found perRow: "+resultSubSub[1];
									log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
										try {perRow = Integer.parseInt(resultSubSub[1]);}
										catch(NumberFormatException e){
											myDebugStr = "found perRow is not an Integer";
												log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
										}
										
										perRowPP = perRow;
										perRowString = resultSubSub[1];
								}else if ("from".equalsIgnoreCase(resultSubSub[0])) {
									myDebugStr = "found from: "+resultSubSub[1];
									log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
										dealsFrom = resultSubSub[1];
								}else if ("context".equalsIgnoreCase(resultSubSub[0])) {
									myDebugStr = "found context: "+resultSubSub[1];
									log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
										showInContextOf = resultSubSub[1];
								}else if ("depth".equalsIgnoreCase(resultSubSub[0])) {
									myDebugStr = "found depth: "+Integer.parseInt(resultSubSub[1]);
									log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
										grabberDepth = Integer.parseInt(resultSubSub[1]);
								}else if ("deals".equalsIgnoreCase(resultSubSub[0])) {
									myDebugStr = "found deals: "+resultSubSub[1];
									log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
										dealsOnly = isTrue(resultSubSub[1]);
								}else if ("feats".equalsIgnoreCase(resultSubSub[0])) {
									myDebugStr = "found feats: "+resultSubSub[1];
									log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
										featuredOnly = isTrue(resultSubSub[1]);
								}else if ("newOnly".equalsIgnoreCase(resultSubSub[0])) {
									myDebugStr = "found newOnly: "+resultSubSub[1];
									log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
										newOnly = isTrue(resultSubSub[1]);
								}else if ("bisOnly".equalsIgnoreCase(resultSubSub[0])) {
									myDebugStr = "found bisOnly: "+resultSubSub[1];
									log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
										bisOnly = isTrue(resultSubSub[1]);
								}else if ("exPer".equalsIgnoreCase(resultSubSub[0])) {
									myDebugStr = "found exPer: "+resultSubSub[1];
									log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
										exPer = isTrue(resultSubSub[1]);
								}else if ("exFro".equalsIgnoreCase(resultSubSub[0])) {
									myDebugStr = "found exFro: "+resultSubSub[1];
									log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
										exFro = isTrue(resultSubSub[1]);
								}else if ("exDisc".equalsIgnoreCase(resultSubSub[0])) {
									myDebugStr = "found exDisc: "+resultSubSub[1];
									log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
										exDisc = isTrue(resultSubSub[1]);
								}else if ("igShowCh".equalsIgnoreCase(resultSubSub[0])) {
									myDebugStr = "found igShowCh: "+resultSubSub[1];
									log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
										igShowCh = isTrue(resultSubSub[1]);
								}else if ("retHidFolds".equalsIgnoreCase(resultSubSub[0])) {
									myDebugStr = "found retHidFolds: "+resultSubSub[1];
									log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
										retHidFolds = isTrue(resultSubSub[1]);
								}else if ("retSecFolds".equalsIgnoreCase(resultSubSub[0])) {
									myDebugStr = "found retSecFolds: "+resultSubSub[1];
									log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
										retSecFolds = isTrue(resultSubSub[1]);
								}else if ("sortBy".equalsIgnoreCase(resultSubSub[0])) {
									myDebugStr = "found sortBy: "+resultSubSub[1];
									log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
										sortBy = resultSubSub[1];
								}else if ("rows".equalsIgnoreCase(resultSubSub[0])) {
									myDebugStr = "found rows: "+resultSubSub[1];
									log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
										maxRows = Integer.parseInt(resultSubSub[1]);
								}else if ("descrips".equalsIgnoreCase(resultSubSub[0])) {
									myDebugStr = "found descrips: "+resultSubSub[1];
									log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
										showDescrips = isTrue(resultSubSub[1]);
								}else if ("uniqG".equalsIgnoreCase(resultSubSub[0])) {
									myDebugStr = "found uniqG: "+resultSubSub[1];
									log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
										uniqG = isTrue(resultSubSub[1]);
								}else if ("uniqR".equalsIgnoreCase(resultSubSub[0])) {
									myDebugStr = "found uniqR: "+resultSubSub[1];
									log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
										uniqR = isTrue(resultSubSub[1]);
								}else if ("showNewText".equalsIgnoreCase(resultSubSub[0])) {
									myDebugStr = "found showNewText: "+resultSubSub[1];
									log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
										showNewText = isTrue(resultSubSub[1]);
								}else if ("dynImg".equalsIgnoreCase(resultSubSub[0])) {
									myDebugStr = "found dynImg: "+resultSubSub[1];
									log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
										dynImg = isTrue(resultSubSub[1]);
								}else if ("add".equalsIgnoreCase(resultSubSub[0])) {
									myDebugStr = "found add: "+resultSubSub[1];
									log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
										add = resultSubSub[1];
								}else{
									myDebugStr = "found ???=???: "+resultSubSub[0]+"="+resultSubSub[1];
									log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
								}
							}
						}
						//set context
						if (catId != null && showInContextOf == null) {
							showInContextOf = catId;
							myDebugStr = "PAGE property: set showInContextOf: "+showInContextOf+" (catId: "+catId+")";
							log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
						}
					}
				}
			}catch(Exception e){
				myDebugStr = "PAGE property: EXCEPTION: "+e;
					log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
				myDebugStr = "PAGE property: Parsing property has an ERROR. Check fdstore.properties file.";
					log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
			}

			myDebugStr = "ROW rowId: "+rowId;
				log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
			myDebugStr = "ROW curRow: "+curRow;
				log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }

			//setup layout settings
							
				//depth to grab from default: 1
				layoutSettings.setGrabberDepth(grabberDepth); //use passed value
					myDebugStr = "ROW "+curRow+": ItemGrabber layoutSettings.getGrabberDepth() : "+layoutSettings.getGrabberDepth();
						log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }

				//ignore the 'showChildren' setting? default: false
				layoutSettings.setIgnoreShowChildren(igShowCh);
					myDebugStr = "ROW "+curRow+": ItemGrabber layoutSettings.isIgnoreShowChildren() : "+layoutSettings.isIgnoreShowChildren();
						log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }

				//return hidden folders? default: false
				layoutSettings.setReturnHiddenFolders(retHidFolds);
					myDebugStr = "ROW "+curRow+": ItemGrabber layoutSettings.isReturnHiddenFolders() : "+layoutSettings.isReturnHiddenFolders();
						log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }

				//return secondary folders? default: false
				layoutSettings.setReturnSecondaryFolders(retSecFolds);
					myDebugStr = "ROW "+curRow+": ItemGrabber layoutSettings.isReturnSecondaryFolders() : "+layoutSettings.isReturnSecondaryFolders();
						log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
				
				//filter out disc. products? default: true
				layoutSettings.setFilterDiscontinued(exDisc);
					myDebugStr = "ROW "+curRow+": ItemGrabber layoutSettings.isFilterDiscontinued() : "+layoutSettings.isFilterDiscontinued();
						log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }

				//ignore dupe products? default: false (use false here, we'll use uniqR and uniqG to determine the logic later)
				layoutSettings.setIgnoreDuplicateProducts(false);
					myDebugStr = "ROW "+curRow+": ItemGrabber layoutSettings.isIgnoreDuplicateProducts() : "+layoutSettings.isIgnoreDuplicateProducts();
						log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }

				//sorting...
				if (!"".equals(sortBy)) {
					//do some sorting
					String[] sortConfig = sortBy.split("_");

					for (int cfg=0; cfg<sortConfig.length; cfg++) {
						
						myDebugStr = "ROW "+curRow+": Found sortBy : "+sortConfig[cfg];
							log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }

						if ("priority".equalsIgnoreCase(sortConfig[cfg]) || "priorityDesc".equalsIgnoreCase(sortConfig[cfg])) {
							boolean sortDesc = ("priorityDesc".equalsIgnoreCase(sortConfig[cfg]))?true:false;
							myDebugStr = "ROW "+curRow+": Using sortBy : "+sortConfig[cfg]+", Descending: "+sortDesc;
								log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
							layoutSettings.addSortStrategyElement(new SortStrategyElement(SortStrategyElement.PRODUCTS_BY_PRIORITY, sortDesc));
						}
						if ("price".equalsIgnoreCase(sortConfig[cfg]) || "priceDesc".equalsIgnoreCase(sortConfig[cfg])) {
							boolean sortDesc = ("priceDesc".equalsIgnoreCase(sortConfig[cfg]))?true:false;
							myDebugStr = "ROW "+curRow+": Using sortBy : "+sortConfig[cfg]+", Descending: "+sortDesc;
								log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
							layoutSettings.addSortStrategyElement(new SortStrategyElement(SortStrategyElement.PRODUCTS_BY_PRICE, sortDesc));
						}
						if ("name".equalsIgnoreCase(sortConfig[cfg]) || "nameDesc".equalsIgnoreCase(sortConfig[cfg])) {
							boolean sortDesc = ("nameDesc".equalsIgnoreCase(sortConfig[cfg]))?true:false;
							myDebugStr = "ROW "+curRow+": Using sortBy : "+sortConfig[cfg]+", Descending: "+sortDesc;
								log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
							layoutSettings.addSortStrategyElement(new SortStrategyElement(SortStrategyElement.PRODUCTS_BY_NAME, sortDesc));
						}
						if ("kosher".equalsIgnoreCase(sortConfig[cfg]) || "kosherDesc".equalsIgnoreCase(sortConfig[cfg])) {
							boolean sortDesc = ("kosherDesc".equalsIgnoreCase(sortConfig[cfg]))?true:false;
							myDebugStr = "ROW "+curRow+": Using sortBy : "+sortConfig[cfg]+", Descending: "+sortDesc;
								log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
							layoutSettings.addSortStrategyElement(new SortStrategyElement(SortStrategyElement.PRODUCTS_BY_KOSHER, sortDesc));
						}
						if ("nutrition".equalsIgnoreCase(sortConfig[cfg]) || "nutritionDesc".equalsIgnoreCase(sortConfig[cfg])) {
							boolean sortDesc = ("nutritionDesc".equalsIgnoreCase(sortConfig[cfg]))?true:false;
							myDebugStr = "ROW "+curRow+": Using sortBy : "+sortConfig[cfg]+", Descending: "+sortDesc;
								log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
							layoutSettings.addSortStrategyElement(new SortStrategyElement(SortStrategyElement.PRODUCTS_BY_NUTRITION, sortDesc));
						}
						if ("wineAttr".equalsIgnoreCase(sortConfig[cfg]) || "wineAttrDesc".equalsIgnoreCase(sortConfig[cfg])) {
							boolean sortDesc = ("wineAttrDesc".equalsIgnoreCase(sortConfig[cfg]))?true:false;
							myDebugStr = "ROW "+curRow+": Using sortBy : "+sortConfig[cfg]+", Descending: "+sortDesc;
								log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
							layoutSettings.addSortStrategyElement(new SortStrategyElement(SortStrategyElement.PRODUCTS_BY_WINE_ATTRIBUTE, sortDesc));
						}
						if ("rating".equalsIgnoreCase(sortConfig[cfg]) || "ratingDesc".equalsIgnoreCase(sortConfig[cfg])) {
							boolean sortDesc = ("ratingDesc".equalsIgnoreCase(sortConfig[cfg]))?true:false;
							myDebugStr = "ROW "+curRow+": Using sortBy : "+sortConfig[cfg]+", Descending: "+sortDesc;
								log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
							layoutSettings.addSortStrategyElement(new SortStrategyElement(SortStrategyElement.PRODUCTS_BY_RATING, sortDesc));
						}
						if ("domainRating".equalsIgnoreCase(sortConfig[cfg]) || "domainRatingDesc".equalsIgnoreCase(sortConfig[cfg])) {
							boolean sortDesc = ("domainRatingDesc".equalsIgnoreCase(sortConfig[cfg]))?true:false;
							myDebugStr = "ROW "+curRow+": Using sortBy : "+sortConfig[cfg]+", Descending: "+sortDesc;
								log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
							layoutSettings.addSortStrategyElement(new SortStrategyElement(SortStrategyElement.PRODUCTS_BY_DOMAIN_RATING, sortDesc));
						}
						if ("wineCountry".equalsIgnoreCase(sortConfig[cfg]) || "wineCountryDesc".equalsIgnoreCase(sortConfig[cfg])) {
							boolean sortDesc = ("wineCountryDesc".equalsIgnoreCase(sortConfig[cfg]))?true:false;
							myDebugStr = "ROW "+curRow+": Using sortBy : "+sortConfig[cfg]+", Descending: "+sortDesc;
								log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
							layoutSettings.addSortStrategyElement(new SortStrategyElement(SortStrategyElement.PRODUCTS_BY_WINE_COUNTRY, sortDesc));
						}
						//grouping
						if ("grpCatName".equalsIgnoreCase(sortConfig[cfg]) || "grpCatNameDesc".equalsIgnoreCase(sortConfig[cfg])) {
							boolean sortDesc = ("grpCatNameDesc".equalsIgnoreCase(sortConfig[cfg]))?true:false;
							myDebugStr = "ROW "+curRow+": Using sortBy : "+sortConfig[cfg]+", Descending: "+sortDesc;
								log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
							layoutSettings.addSortStrategyElement(new SortStrategyElement(SortStrategyElement.GROUP_BY_CATEGORY_NAME, sortDesc));
						}
						if ("grpCatPriority".equalsIgnoreCase(sortConfig[cfg]) || "grpCatPriorityDesc".equalsIgnoreCase(sortConfig[cfg])) {
							boolean sortDesc = ("grpCatPriorityDesc".equalsIgnoreCase(sortConfig[cfg]))?true:false;
							myDebugStr = "ROW "+curRow+": Using sortBy : "+sortConfig[cfg]+", Descending: "+sortDesc;
								log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
							layoutSettings.addSortStrategyElement(new SortStrategyElement(SortStrategyElement.GROUP_BY_CATEGORY_PRIORITY, sortDesc));
						}
						if ("grpAvailability".equalsIgnoreCase(sortConfig[cfg]) || "grpAvailabilityDesc".equalsIgnoreCase(sortConfig[cfg])) {
							boolean sortDesc = ("grpAvailabilityDesc".equalsIgnoreCase(sortConfig[cfg]))?true:false;
							myDebugStr = "ROW "+curRow+": Using sortBy : "+sortConfig[cfg]+", Descending: "+sortDesc;
								log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
							layoutSettings.addSortStrategyElement(new SortStrategyElement(SortStrategyElement.GROUP_BY_AVAILABILITY, sortDesc));
						}
					}
				}

			//first, check for specials

			//obsolete old deals special totally
			if ("wg_deals".equals(curRow)) { curRow = "wgd_deals"; }
			
			
			//special : peak produce
			if ("wgd_produce".equals(curRow)) {

				//do peak produce stuff
				//START Great Right Now 

				//see if row is a category
				currentFolder = ContentFactory.getInstance().getContentNode(curRow);
				if(currentFolder instanceof CategoryModel) {
					//is a category
					myDebugStr = "PP: IS cat";
						log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }

					//we know it's a category, so use it in the generic row
					catId = curRow;

					myDebugStr = "PP: entering: wgd_produce:/includes/department_peakproduce_whatsgood.jspf";
						log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
					%><%@ include file="/includes/department_peakproduce_whatsgood.jspf" %><%
				}else{
					myDebugStr = "PP: IS NOT cat";
						log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
				}
				//reset catId
				catId = null;

				//END Great Right Now

			//special : ADs
			}else if ("wg_ads".equals(curRow)) {

				//do ad row
				//START AD spots
					mediaPathTemp=mediaPathTempBase+prefix+"_line.html"; //set media to line

					myDebugStr = "ADS: including: wg_ads:"+mediaPathTemp;
						log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
					%><fd:IncludeMedia name="<%= mediaPathTemp %>" /><%

					if (!emailPage && FDStoreProperties.isAdServerEnabled()) {
						//not an email
						mediaPathTemp=mediaPathTempBase+prefix+"_ads_on.ftl"; //ads are on
					}else{
						//is an email, or adserver is disabled
						mediaPathTemp=mediaPathTempBase+prefix+"_ads_off.ftl"; //ads are off
					}
					myDebugStr = "ADS: including: ads:"+mediaPathTemp;
						log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
					%><fd:IncludeMedia name="<%= mediaPathTemp %>" parameters="<%=params%>" withErrorReport="false" /><%
				//END AD spots

			//special : MULTI
			}else if ("!MULTI!".equals(curRow)) {

				//do MULTI row
					/*
					 *	This feature is not 100% ready, skip out.
					 */

			//no specials
			}else{
				//see if row is a category
				currentFolder = ContentFactory.getInstance().getContentNode(curRow);

				if(currentFolder instanceof CategoryModel || currentFolder instanceof DepartmentModel) {

					if (currentFolder instanceof CategoryModel) {
						/* is a category */
						myDebugStr = "???: IS cat";
							log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
					}
					if (currentFolder instanceof DepartmentModel) {
						/* is a department */
						myDebugStr = "???: IS dept";
							log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
					
					}

					catId = curRow; /* catId is used even if it's a department */

					//we know it's a category or department, so use it in the generic row
					myDebugStr = "???: including: GENERIC:/includes/i_dynamicRows_generic.jspf";
						log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
					myDebugStr = "???: including: GENERIC:deptId="+deptId+", catId="+catId;
						log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
          %><%@include file="/includes/i_dynamicRows_generic.jspf" %><%

				}else{
					//is NOT a category
					myDebugStr = "???: IS NOT cat or dept";
						log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }

					//try using it as media instead
					mediaPathTemp=mediaPathTempBase+curRow;

					
					//add an id to params
					params.put("rowId", String.valueOf(rowId) );
					params.put("rowName", curRow);

					myDebugStr = "???: including: MEDIA:"+mediaPathTemp;
						log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
					%><fd:IncludeMedia name="<%= mediaPathTemp %>" parameters="<%=params%>" withErrorReport="false" /><%
				}
			}

		}

		%></fd:FDShoppingCart><%
	//no rows were found
	}else{
		myDebugStr = "PAGE strDynRows: No rows found? Check fdstore.properties file";
			log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
	}

%>
