<%@page import="com.freshdirect.fdstore.pricing.ProductModelPricingAdapter"%>
<%@page import="java.util.List"%>
<%@page import="com.freshdirect.fdstore.content.ContentNodeModel"%>
<%@page import="com.freshdirect.fdstore.content.ProductModel"%>
<%@page import="com.freshdirect.webapp.util.JspMethods"%>
<%@page import="com.freshdirect.webapp.util.DisplayObject"%>
<%@page import="com.freshdirect.webapp.util.FDURLUtil"%>
<%@page import="com.freshdirect.fdstore.content.BrandModel"%>
<%@page import="com.freshdirect.fdstore.content.Image"%>
<%@page import="com.freshdirect.webapp.util.ProductImpression"%>
<%@page import="com.freshdirect.fdstore.content.ContentUtil"%>
<%@page import="java.util.Iterator"%>
<%@ taglib uri="/WEB-INF/shared/tld/fd-display.tld" prefix='display' %>
<%@ taglib uri='logic' prefix='logic' %>
<%
if (featuredCat != null) {
	final int itemsMinToShow = 1;
	final int itemsMaxToShow = 4;
	List<ContentNodeModel> pList = featuredCat.getFeaturedNewProdBrands();
	for(Iterator<ContentNodeModel> it=pList.iterator(); it.hasNext();){
		ContentNodeModel node = it.next();
		if ( node == null || ! (node instanceof ProductModel) ) {
			it.remove();
		} else {
			ProductModel pm = (ProductModel)node;
			//Origin : [APPDEV-2857] Blocking Alcohol for customers outside of Alcohol Delivery Area
			if(pm.getPriceCalculator().getSkuModel()==null || !ContentUtil.isAvailableByContext(pm)){
				it.remove();
			}
		}
	}
	String catId = featuredCat.getContentKey().getId();
	int itemsToShow = Math.min(itemsMaxToShow,pList.size());

	//make sure we have the minimum amount first
	if (pList.size()>=itemsMinToShow) {
		
%>
	<div class="ddpp clearfix">
	<div class="ddpp_feat_prod_cont grid-view feat-prod-<%= itemsToShow %>">
	
	
	<logic:iterate id="contentNode" collection="<%= pList.subList(0,itemsToShow) %>" type="java.lang.Object" indexId="idx">
	<%
	ProductImpression pi = null;
	ProductModelPromotionAdapter productModelAdapter = null;
	if ( contentNode instanceof ProductModel ) {
		ProductModel pricedProdModel = new ProductModelPricingAdapter( (ProductModel)contentNode, user.getPricingContext() );
		pi = confStrat.configure(pricedProdModel, confContext);
		// TODO: "013" is the 'new' ribbon, hardcoded here
		productModelAdapter = new ProductModelPromotionAdapter (pi.getProductModel(), true, "013", pi.getSku().getSkuCode());			
	}
	%>
			<div class="grid-item-container featurebox">
			<%@ include file="/includes/product/i_product_box_featured.jspf" %>
			</div>
	<% 
	%>
	
	</logic:iterate>
	
	</div>
	</div>
	
	<%
	} 
	}%>

	