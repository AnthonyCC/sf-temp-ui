<%
/*
	coming in to here
	curRow = !MULTI!
	add = CATID1&CATID2&CATID3...etc
	perRow = #&#&#...etc

	if perRow length != add length, the dif is 0
*/

	
	ArrayList arrOfArrays = new ArrayList(); //array to hold the arrays
	List arrCurIdx = new ArrayList(); //array to hold the current indexes (products)
	List arrCurIdxInfo = new ArrayList(); //array to hold the current indexes (info)
	List arrLen = new ArrayList(); //array to hold the per-Array lengths

	List tmpListMulti=new ArrayList(); //temp list
	
	myDebugStr = "Inside multi include";
		log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
	
	isCat = false;
	isDept = false;
	catId="ban";
	int arrCount = 0;


	myDebugStr = "MULTI: add="+add;
		log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
	
	
	if (!"".equals(perRowString)) {
		//we have additionals, loop and gather the data
		if (perRowString.indexOf("&") > 0) { //zero since it can't START with a ampersand (correctly)
			String[] rowSub = perRowString.split("&"); //found sub attrs
			for (int r=0;r<rowSub.length; r++) {
				arrLen.add((Integer)Integer.parseInt(rowSub[r]));
			}
		}
	}


	//check here for adds
	if (!"".equals(add)) {
		//we have additionals, loop and gather the data
		//check for attributes
		if (add.indexOf("&") > 0) { //zero since it can't START with a ampersand (correctly)
			//log(myDebug, "found colon_ ");
			String[] rowSub = add.split("&"); //found sub attrs

			for (int r=0;r<rowSub.length; r++) {
				currentFolder = ContentFactory.getInstance().getContentNode(rowSub[r]);
				
				myDebugStr = "ROW "+curRow+": add ("+rowSub[r]+")";
					log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }

				/* check if we only want featured items */
				if (featuredOnly) {
					//featured only

					if (isCat) { currentCAT = (CategoryModel)currentFolder; sortedColl.addAll(currentCAT.getFeaturedProducts()); }
					if (isDept) { currentDEPT = (DepartmentModel)currentFolder; sortedColl.addAll(currentDEPT.getFeaturedProducts()); }
					
					myDebugStr = "ROW "+curRow+": feats list : "+sortedColl;
						log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }

				}else{
					//ignore parent's depth, use a depth of only the specified ID here
							myDebugStr = "MULTI: BEFORE ItemGrabber";
								log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
							myDebugStr = "MULTI: currentFolder="+currentFolder;
								log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
				%>
					<fd:ItemGrabber
						category='<%=currentFolder %>' 
						id='rtnColl' 
						depth='<%=layoutSettings.getGrabberDepth()%>'
						ignoreShowChildren='<%=layoutSettings.isIgnoreShowChildren()%>' 
						filterDiscontinued='<%= layoutSettings.isFilterDiscontinued() %>'
						returnHiddenFolders='<%=layoutSettings.isReturnHiddenFolders()%>'
						ignoreDuplicateProducts='<%=layoutSettings.isIgnoreDuplicateProducts()%>'
						returnSecondaryFolders='<%=layoutSettings.isReturnSecondaryFolders()%>' 
						returnSkus='<%=layoutSettings.isReturnSkus()%>'
						workSet='<%=tmpListMulti%>'
					>
						<%
							sortedColl = rtnColl;

							myDebugStr = "ROW "+curRow+": sortedColl ("+sortedColl.size()+"): "+sortedColl;
								log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
							
							request.setAttribute("itemGrabberResult",sortedColl); //** expose result of item grabber to the layout **

						%>
					</fd:ItemGrabber>
				<%
				}

				myDebugStr = "MULTI: BEFORE added to arrofArrs";
					log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }

				//at this point, sortedColl is the cur collection
				//put into arrOfArrays
					//tmpListMulti=new ArrayList(); //temp list
					//tmpListMulti.addAll(sortedColl);
					arrOfArrays.add((new ArrayList()).addAll(sortedColl));
					arrCurIdx.add((Integer)0);
					arrCurIdxInfo.add((Integer)0);

					sortedColl.clear();

				myDebugStr = "MULTI: added to arrofArrs";
					log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
			}
		}else{
			//we just have one add
			currentFolder = ContentFactory.getInstance().getContentNode(add);
			
			myDebugStr = "ROW "+curRow+": add ("+add+")";
				log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }

			/* check if we only want featured items */
			if (featuredOnly) {
				//featured only

				if (isCat) { currentCAT = (CategoryModel)currentFolder; sortedColl.addAll(currentCAT.getFeaturedProducts()); }
				if (isDept) { currentDEPT = (DepartmentModel)currentFolder; sortedColl.addAll(currentDEPT.getFeaturedProducts()); }
				
				myDebugStr = "ROW "+curRow+": feats list : "+sortedColl;
					log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }

			}else{
				//ignore parent's depth, use a depth of only the specified ID here
			%>
				<fd:ItemGrabber
					category='<%=currentFolder %>' 
					id='rtnColl' 
					depth='0'
					ignoreShowChildren='<%=layoutSettings.isIgnoreShowChildren()%>' 
					filterDiscontinued='<%= layoutSettings.isFilterDiscontinued() %>'
					returnHiddenFolders='<%=layoutSettings.isReturnHiddenFolders()%>'
					ignoreDuplicateProducts='<%=layoutSettings.isIgnoreDuplicateProducts()%>'
					returnSecondaryFolders='<%=layoutSettings.isReturnSecondaryFolders()%>' 
					returnSkus='<%=layoutSettings.isReturnSkus()%>'
					workSet='<%=tmpListMulti%>'
				>
					<%
						sortedColl = rtnColl;

						myDebugStr = "ROW "+curRow+": sortedColl ("+sortedColl.size()+"): "+sortedColl;
							log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
						
						request.setAttribute("itemGrabberResult",sortedColl); //** expose result of item grabber to the layout **
						
						myDebugStr = "ROW "+curRow+": ItemGrabber layoutSettings.isIgnoreDuplicateProducts() : "+layoutSettings.isIgnoreDuplicateProducts();
							log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }

					%>
				</fd:ItemGrabber>
			<%
			}
			//at this point, sortedColl is the cur collection
			//put into arrOfArrays
			arrOfArrays.add(sortedColl);
		}

		
		//double check max lengths
		for (int a=0; a<arrLen.size(); a++) {
			//arrLen[a] = (arrLen[a]<=arrOfArrays[a].size())?arrLen[a]:arrOfArrays[a].size();

			//and reset perRow
			//perRow = perRow+arrLen[a];
		}

		out.println("<hr />");
		myDebugStr = "arrOfArrays= "+arrOfArrays;
			log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
		myDebugStr = "arrCurIdx= "+arrCurIdx;
			log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
		myDebugStr = "arrCurIdxInfo= "+arrCurIdxInfo;
			log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
		myDebugStr = "arrLen= "+arrLen;
			log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
	}
try{
}catch(Exception e){
	myDebugStr = "exception:"+e.getMessage();
		log(myDebug, myDebugStr);if (myDebugPrint) { out.println("<div class=\"myDebug\">"+myDebugStr+"</div>"); }
}

%>