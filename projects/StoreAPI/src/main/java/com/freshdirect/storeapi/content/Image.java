/* Generated by Together */
package com.freshdirect.storeapi.content;

import com.freshdirect.cms.CmsServiceLocator;
import com.freshdirect.cms.contentio.xml.XmlContentMetadataService;

public class Image extends MediaModel {
	private static final long serialVersionUID = 4997898696622901527L;

	private static final String PATH_BLANK_IMAGE	= "/media_stat/images/layout/clear.gif";
	public static final Image BLANK_IMAGE			= new Image(PATH_BLANK_IMAGE, 1, 1);

	private int width;
	private int height;

	public Image() {
		super();
		mediaType = TYPE_IMAGE;
	}

	public Image(String path, int width, int height) {
		this();
		this.setPath(path);
		this.setWidth(width);
		this.setHeight(height);
	}

	@Override
    public int getWidth() {
		return width;
	}

	public void setWidth(int width) {
		this.width = width;
	}

	@Override
    public int getHeight() {
		return height;
	}

	public void setHeight(int height) {
		this.height = height;
	}

	@Override
    public String toString() {
		return "Image[" + getPK() + ", " + getPath() + ", " + getWidth() + "x" + getHeight() + "]";
	}

	public String toHtml(String alternateName, String className, boolean withPublishId) {
		return toHtml((withPublishId ? getPathWithPublishId() : getPath()), getWidth(), getHeight(), alternateName, className);
	}

	public static String toHtml(String path, int width, int height, String alternateName, String className) {
		return "<img src=\"" + path + "\" width=\"" + width + "\" height=\"" + height + '"'
				+ (((alternateName != null) && (alternateName.trim().length() > 0)) ? (" alt=\"" + alternateName + '"') : "")
				+ (((className != null) && (className.trim().length() > 0)) ? (" class=\"" + className + '"') : "") + '>';
	}

	public String toHtml(String alternateName, String className) {
		return toHtml(alternateName, className, false);
	}

	public String toHtml(String alternateName) {
		return toHtml(alternateName, null, false);
	}

	public String toHtml(String alternateName, boolean withPublishId) {
		return toHtml(alternateName, null, withPublishId);
	}

	public String toHtml() {
		return toHtml(null);
	}

	public String getPathWithPublishId() {
        XmlContentMetadataService metadataService = CmsServiceLocator.xmlContentMetadataService();
        String publishId = null;
        if (metadataService != null) {
            publishId = metadataService.calculatePublishId();
        }

		if (publishId != null) {
			return getPath() + ((getPath().contains("?"))?"&":"?") + "publishId=" + publishId; //this needs to check for & vs ?
		} else {
			return getPath();
		}
	}

    /* calculate correct height to fit a container */
    public int getFittedHeight(int fitToWidth, int fitToHeight) {
    	float scale = getScale(fitToWidth, fitToHeight);
    	return (int) (scale * getHeight()); // int cast will truncate (floor)
    }

    /* calculate correct width to fit a container */
    public int getFittedWidth(int fitToWidth, int fitToHeight) {
    	float scale = getScale(fitToWidth, fitToHeight);
    	return (int) (scale * getWidth()); // int cast will truncate (floor)
    }

	private float getScale(int fitToWidth, int fitToHeight) {
		float widthScale = (float) fitToWidth / (float) getWidth();
    	float heightScale = (float) fitToHeight / (float) getHeight();
    	float scale = Math.min(widthScale, heightScale);
		return scale;
	}


	/**
	 * Check if this instance is a blank ( or placeholder) image
	 * @return
	 */
	public boolean isBlank() {
		return PATH_BLANK_IMAGE.equalsIgnoreCase( getPath() );
	}
}
