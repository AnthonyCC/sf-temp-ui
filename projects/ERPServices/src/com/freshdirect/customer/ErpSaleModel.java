/* Generated by Together */

package com.freshdirect.customer;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Set;

import com.freshdirect.affiliate.ErpAffiliate;
import com.freshdirect.framework.core.ModelSupport;
import com.freshdirect.framework.core.PrimaryKey;
import com.freshdirect.framework.util.MathUtil;
import com.freshdirect.giftcard.ErpEmailGiftCardModel;
import com.freshdirect.giftcard.ErpGiftCardAuthModel;
import com.freshdirect.giftcard.ErpGiftCardDlvConfirmModel;
import com.freshdirect.giftcard.ErpGiftCardTransModel;
import com.freshdirect.giftcard.ErpGiftCardTransactionModel;
import com.freshdirect.giftcard.ErpPostAuthGiftCardModel;
import com.freshdirect.giftcard.ErpPreAuthGiftCardModel;
import com.freshdirect.giftcard.ErpRegisterGiftCardModel;
import com.freshdirect.giftcard.ErpReverseAuthGiftCardModel;
import com.freshdirect.payment.AuthorizationStrategy;
import com.freshdirect.payment.EnumGiftCardTransactionStatus;

/**
 * ErpSale model class.
 *
 * @version    $Revision$
 * @author     $Author$
 * @stereotype fd-model
 */
public class ErpSaleModel extends ModelSupport implements ErpSaleI {

	private static final String AVS_MATCH = "Y";

	private PrimaryKey customerPk;
	private List transactions;
	private List<ErpComplaintModel> complaints;
	private EnumSaleStatus status;
	private String sapOrderNumber;
	private ErpShippingInfo shippingInfo;
	private Set usedPromotionCodes;
	private List cartonInfo = new ArrayList();
	private String deliveryPassId;
	private EnumSaleType type;
	private double subTotal;
	private EnumDeliveryType deliveryType;
	private Date createDate;


	/**
	 * @return Returns the deliveryPassId.
	 */
	public String getDeliveryPassId() {
		return deliveryPassId;
	}

	/**
	 * @param deliveryPassId The deliveryPassId to set.
	 */
	public void setDeliveryPassId(String deliveryPassId) {
		this.deliveryPassId = deliveryPassId;
	}


	/**
	 *
	 * @param customerPk
	 * @param order
	 * @param usedPromotionCodes
	 * @param dlvPassId
	 */
	public ErpSaleModel(PrimaryKey customerPk, ErpAbstractOrderModel order, Set usedPromotionCodes, String dlvPassId,EnumSaleType type) {
		this.customerPk = customerPk;
		this.transactions = new ArrayList();
		this.transactions.add(order);
		this.status = EnumSaleStatus.NEW;
		this.complaints = new ArrayList<ErpComplaintModel>();
		this.usedPromotionCodes = usedPromotionCodes;
		this.deliveryPassId = dlvPassId;
		this.type=type;
		this.subTotal = order.getSubTotal();
		this.createDate = new Date();
		this.deliveryType = EnumDeliveryType.getDeliveryType("");

	}
	/**
	 *
	 * @param customerPk
	 * @param status
	 * @param transactions
	 * @param complaints
	 * @param sapOrderNumber
	 * @param shippingInfo
	 * @param usedPromotionCodes
	 * @param cartonInfo
	 * @param dlvPassId
	 */
	public ErpSaleModel(PrimaryKey customerPk, EnumSaleStatus status, List transactions, List complaints, String sapOrderNumber, ErpShippingInfo shippingInfo,
		Set usedPromotionCodes, List cartonInfo, String dlvPassId,EnumSaleType type) {
		this.customerPk = customerPk;
		this.status = status;
		this.transactions = transactions;
		this.complaints = complaints;
		this.sapOrderNumber = sapOrderNumber;
		this.shippingInfo = shippingInfo;
		this.cartonInfo = cartonInfo;
		this.usedPromotionCodes = usedPromotionCodes;
		this.deliveryPassId = dlvPassId;
		this.type=type;
		this.deliveryType = EnumDeliveryType.getDeliveryType("");

	}

	private boolean isStatus(EnumSaleStatus[] states) {
		for (int i = 0; i < states.length; i++) {
			if (this.status.equals(states[i])) {
				return true;
			}
		}
		return false;
	}

	private void assertStatus(EnumSaleStatus validState) throws ErpTransactionException {
		if (!this.status.equals(validState)) {
			throw new ErpTransactionException("Sale " + this.getPK().getId() + " is " + this.status + ". Expected " + validState);
		}
	}

	private void assertStatus(EnumSaleStatus[] validStates) throws ErpTransactionException {
		if (!this.isStatus(validStates)) {
			StringBuffer msg = new StringBuffer();
			msg.append("Sale ").append(this.getPK().getId());
			msg.append(" is ").append(this.status);
			msg.append(". Expected ");
			for (int i = 0; i < validStates.length; i++) {
				if (i != 0)
					msg.append(", ");
				msg.append(validStates[i].toString());
			}
			throw new ErpTransactionException(msg.toString());
		}
	}

	private EnumSaleStatus getNextState() {

		if (!isFullyAuthorized()) {
			List auths = this.filterTransaction(ErpAuthorizationModel.class);
			if(auths.isEmpty()) {
				return EnumSaleStatus.SUBMITTED;
			}else{
				ErpAuthorizationModel a = (ErpAuthorizationModel) auths.get(auths.size()-1);
				return a.isApproved() ? EnumSaleStatus.SUBMITTED : EnumSaleStatus.AUTHORIZATION_FAILED;
			}
		}

		boolean avsMatch = true;
		for (Iterator i = this.getApprovedAuthorizations().iterator(); i.hasNext();) {
			ErpAuthorizationModel auth = (ErpAuthorizationModel) i.next();
			if (!AVS_MATCH.equalsIgnoreCase(auth.getAvs())) {
				avsMatch = false;
				break;
			}
		}
		return avsMatch ? EnumSaleStatus.AUTHORIZED : EnumSaleStatus.AVS_EXCEPTION;
	}

	private boolean isFullyAuthorized() {
		AuthorizationStrategy s = new AuthorizationStrategy(this);
		return s.getOutstandingAuthorizations().isEmpty();
	}

	public  ErpChargeInvoiceModel getLastChargeInvoice () {
		List lst = this.filterTransaction(ErpChargeInvoiceModel.class);
		if(lst.isEmpty()) {
			return null;
		}

		return (ErpChargeInvoiceModel) lst.get(lst.size() - 1);
	}

	private List filterTransaction(Class klazz) {
		List lst = new ArrayList();

		for(Iterator i = this.transactions.iterator(); i.hasNext(); ) {
			Object o = i.next();
			if(klazz.isInstance(o)) {
				lst.add(o);
			}
		}

		Collections.sort(lst, ErpTransactionModel.TX_DATE_COMPARATOR);
		return Collections.unmodifiableList(lst);
	}

	public double getOutstandingCaptureAmount() {
		ErpInvoiceModel inv = this.getLastInvoice();
		double amount = MathUtil.roundDecimal(inv.getAmount());
		for(Iterator i = this.getGoodCaptures().iterator(); i.hasNext(); ){
			ErpCaptureModel cm = (ErpCaptureModel) i.next();
			amount -= MathUtil.roundDecimal(cm.getAmount());
		}

		return MathUtil.roundDecimal(amount);
	}

	public List getCaptures(ErpAffiliate affiliate) {
		List lst = new ArrayList();
		for(Iterator i = this.getGoodCaptures().iterator(); i.hasNext(); ) {
			ErpCaptureModel capture = (ErpCaptureModel) i.next();
			if(capture.getAffiliate().equals(affiliate)) {
				lst.add(capture);
			}
		}
		return lst;
	}

	public List getApprovedAuthorizations(ErpAffiliate affiliate, ErpPaymentMethodI pm) {
		List auths = new ArrayList();

		for(Iterator i = this.getApprovedAuthorizations().iterator(); i.hasNext(); ) {
			ErpAuthorizationModel auth = (ErpAuthorizationModel) i.next();
			if(affiliate.equals(auth.getAffiliate())) {
				if(auth.getCardType().equals(pm.getCardType()) && pm.getAccountNumber().endsWith(auth.getCcNumLast4())){
					auths.add(auth);
				}
			}
		}

		return auths;
	}

	public List getApprovedAuthorizations() {
		List capturedAuthCodes = new ArrayList();
		for (Iterator i = this.transactions.iterator(); i.hasNext();) {
			Object o = i.next();
			if (o instanceof ErpCaptureModel) {
				capturedAuthCodes.add(((ErpCaptureModel) o).getAuthCode());
			}
		}

		List lst = new ArrayList();
		for (Iterator i = this.transactions.iterator(); i.hasNext();) {
			Object o = i.next();
			if (o instanceof ErpAuthorizationModel) {
				ErpAuthorizationModel auth = (ErpAuthorizationModel) o;

				if (EnumPaymentResponse.APPROVED.equals(auth.getResponseCode())) {
					if (!capturedAuthCodes.contains(auth.getAuthCode())) {
						lst.add(auth);
					}
				}
			}
		}
		return lst;
	}

	public ErpAbstractOrderModel getCurrentOrder() {
		
		ErpAbstractOrderModel lastOrder = null;
		List txs = new ArrayList(this.transactions);
	    //for(int i=0;i<txs.size();i++) System.out.println("ErpTransactionModel :"+((ErpTransactionModel)txs.get(i)).getTransactionDate());  
		Collections.sort(txs, ErpTransactionI.TX_DATE_COMPARATOR);
		for (Iterator i = txs.iterator(); i.hasNext();) {
			Object o = i.next();
			if (o instanceof ErpAbstractOrderModel) {
				lastOrder = (ErpAbstractOrderModel) o;
			}
		}
		return lastOrder;
	}

	public void submitFailed(String message) throws ErpTransactionException {
		this.assertStatus(
			new EnumSaleStatus[] {
				EnumSaleStatus.NEW,
				EnumSaleStatus.MODIFIED,
				EnumSaleStatus.MODIFIED_CANCELED,
				EnumSaleStatus.NOT_SUBMITTED,
				EnumSaleStatus.AVS_EXCEPTION });

		ErpSubmitFailedModel m = new ErpSubmitFailedModel();
		m.setTransactionSource(EnumTransactionSource.SYSTEM);
		m.setMessage(message);
		this.transactions.add(m);
		this.status = EnumSaleStatus.NOT_SUBMITTED;
	}

	public void createOrderComplete(String sapOrderNumber) throws ErpTransactionException {

		if(EnumSaleType.REGULAR.equals(this.type)) {
				this.assertStatus(new EnumSaleStatus[] { EnumSaleStatus.NEW, EnumSaleStatus.NOT_SUBMITTED });
		}
		else if(EnumSaleType.SUBSCRIPTION.equals(this.type)) {
				this.assertStatus(new EnumSaleStatus[] { EnumSaleStatus.NEW, EnumSaleStatus.MODIFIED,EnumSaleStatus.NOT_SUBMITTED });
		}

		this.sapOrderNumber = sapOrderNumber;
		this.status = this.getNextState();
	}

	public void modifyOrder(ErpModifyOrderModel model, Set usedPromotionCodes) throws ErpTransactionException {
		this.assertStatus(
			new EnumSaleStatus[] {
				EnumSaleStatus.SUBMITTED,
				EnumSaleStatus.AUTHORIZED,
				EnumSaleStatus.AUTHORIZATION_FAILED,
				EnumSaleStatus.NOT_SUBMITTED,
				EnumSaleStatus.AVS_EXCEPTION,
				EnumSaleStatus.SETTLEMENT_FAILED
				});
		this.transactions.add(model);
		if (this.status != EnumSaleStatus.SETTLEMENT_FAILED) {
			this.status = EnumSaleStatus.MODIFIED;
		}

		this.usedPromotionCodes = usedPromotionCodes;
	}

	public void modifyOrderComplete() throws ErpTransactionException {
		this.assertStatus(
			new EnumSaleStatus[] { EnumSaleStatus.MODIFIED, EnumSaleStatus.NOT_SUBMITTED, EnumSaleStatus.AVS_EXCEPTION });

		this.status = getNextState();
	}

	public void cancelOrder(ErpCancelOrderModel cancelOrder) throws ErpTransactionException {
		this.assertStatus(
			new EnumSaleStatus[] {
				EnumSaleStatus.SUBMITTED,
				EnumSaleStatus.AUTHORIZED,
				EnumSaleStatus.LOCKED,
				EnumSaleStatus.AVS_EXCEPTION,
				EnumSaleStatus.AUTHORIZATION_FAILED });

		this.usedPromotionCodes.clear();
		this.transactions.add(cancelOrder);
		this.status = EnumSaleStatus.MODIFIED_CANCELED;
	}

	public void cancelGCOrder(ErpCancelOrderModel cancelOrder) throws ErpTransactionException {
		this.assertStatus(
			new EnumSaleStatus[] {
				EnumSaleStatus.ENROUTE});

		this.usedPromotionCodes.clear();
		this.transactions.add(cancelOrder);
		this.status = EnumSaleStatus.MODIFIED_CANCELED;
	}
	
	public void cancelOrderComplete() throws ErpTransactionException {
		this.assertStatus(new EnumSaleStatus[] { EnumSaleStatus.MODIFIED_CANCELED, EnumSaleStatus.NOT_SUBMITTED });
		this.status = EnumSaleStatus.CANCELED;
	}

	public void addInvoice(ErpInvoiceModel invoiceModel) throws ErpTransactionException {

		this.assertStatus(new EnumSaleStatus[] { EnumSaleStatus.INPROCESS, EnumSaleStatus.RETURNED });

		this.transactions.add(invoiceModel);
		if (this.status.equals(EnumSaleStatus.RETURNED)) {
			if ((int) Math.round(invoiceModel.getAmount() * 100) > 0) {
				if(invoiceModel.getAppliedGiftCards().size() > 0){
					//Gift card used on this order. set the status to POST AUTH Pending.
					this.status =  EnumSaleStatus.POST_AUTH_PENDING;
				} else {
					this.status = EnumSaleStatus.CAPTURE_PENDING;			
				}
			} else {
				this.status = EnumSaleStatus.SETTLED;
			}
		} else {
			this.status = EnumSaleStatus.ENROUTE;
		}
	}

	public void addChargeInvoice(ErpChargeInvoiceModel chargeInvoiceModel) throws ErpTransactionException {

		this.assertStatus(new EnumSaleStatus[] { EnumSaleStatus.SUBMITTED, EnumSaleStatus.AUTHORIZED, EnumSaleStatus.SETTLEMENT_FAILED });

		this.transactions.add(chargeInvoiceModel);
	}

	public List reconcileSale() throws ErpTransactionException {

		this.assertStatus(EnumSaleStatus.ENROUTE);

		ErpAbstractOrderModel orderModel = this.getCurrentOrder();
		ErpInvoiceModel invoice = this.getInvoice();

		List orderLines = orderModel.getOrderLines();
		List invoiceLines = invoice.getInvoiceLines();
		ReconciliationCaseBuilder caseBuilder = new ReconciliationCaseBuilder(this.customerPk, this.getPK(), orderModel);

		if (orderLines.size() != invoiceLines.size()) {
			throw new ErpTransactionException(
				"Sale "
					+ this.getPK().getId()
					+ " has "
					+ orderLines.size()
					+ " order lines, but invoice contains "
					+ invoiceLines.size());
		}

		for (int i = 0; i < orderLines.size(); i++) {

			ErpOrderLineModel orderLine = (ErpOrderLineModel) orderLines.get(i);
			ErpInvoiceLineModel invoiceLine = null;

			for (Iterator j = invoiceLines.iterator(); j.hasNext();) {
				ErpInvoiceLineModel tmp = (ErpInvoiceLineModel) j.next();
				if (tmp.getOrderLineNumber().equals(orderLine.getOrderLineNumber())) {
					invoiceLine = tmp;
					break;
				}
			}

			if (!invoiceLine.getMaterialNumber().equals(orderLine.getMaterialNumber())) {
				throw new ErpTransactionException(
					"Sale "
						+ this.getPK().getId()
						+ " Material number for orderLineNumber doesnt match: "
						+ orderLine.getOrderLineNumber());
			}

			caseBuilder.reconcile(orderLine, invoiceLine);
		}

		return caseBuilder.getCases();
	}

	public ErpInvoiceModel getInvoice() throws ErpTransactionException {
		this.assertStatus(
			new EnumSaleStatus[] {
				EnumSaleStatus.ENROUTE,
				EnumSaleStatus.PAYMENT_PENDING,
				EnumSaleStatus.SETTLED,
				EnumSaleStatus.REFUSED_ORDER,
				EnumSaleStatus.SETTLEMENT_FAILED,
				EnumSaleStatus.RETURNED,
				EnumSaleStatus.CAPTURE_PENDING,
				EnumSaleStatus.SETTLED_RETURNED,
				EnumSaleStatus.PENDING,
				EnumSaleStatus.REDELIVERY,
				EnumSaleStatus.CHARGEBACK,
				EnumSaleStatus.POST_AUTH_PENDING,
				EnumSaleStatus.SETTLEMENT_PENDING});

		ErpInvoiceModel lastInvoice = null;
		List txs = new ArrayList(this.transactions);
		Collections.sort(txs, ErpTransactionI.TX_DATE_COMPARATOR);
		for (Iterator i = txs.iterator(); i.hasNext();) {
			Object o = i.next();
			if (o instanceof ErpInvoiceModel) {
				lastInvoice = (ErpInvoiceModel) o;
			}
		}
		if (lastInvoice == null) {
			throw new ErpTransactionException("No invoice in sale " + this.getPK().getId());
		}
		return lastInvoice;
	}

	public void updateShippingInfo(ErpShippingInfo shippingInfo) {
		this.shippingInfo = shippingInfo;
	}

	public void markAsRedelivery() throws ErpTransactionException {
		this.assertStatus(EnumSaleStatus.ENROUTE);
		this.status = EnumSaleStatus.PENDING;
	}

	public void markAsEnroute() throws ErpTransactionException {
		this.assertStatus(EnumSaleStatus.CAPTURE_PENDING);
		this.status = EnumSaleStatus.ENROUTE;
	}

	public void markAsReturn() throws ErpTransactionException {
		this.assertStatus(new EnumSaleStatus[] { EnumSaleStatus.ENROUTE, EnumSaleStatus.REDELIVERY, EnumSaleStatus.PENDING });
		this.status = EnumSaleStatus.REFUSED_ORDER;
	}

	public void addReturn(ErpReturnOrderModel returnModel) throws ErpTransactionException {
		this.assertStatus(new EnumSaleStatus[] { EnumSaleStatus.REFUSED_ORDER, EnumSaleStatus.RETURNED });
		this.transactions.add(returnModel);
		this.status = EnumSaleStatus.RETURNED;
	}

	public void addRedelivery(ErpRedeliveryModel redeliveryModel) throws ErpTransactionException {
		this.assertStatus(EnumSaleStatus.PENDING);
		this.transactions.add(redeliveryModel);
		this.status = EnumSaleStatus.REDELIVERY;
	}

	public void addDeliveryConfirm(ErpDeliveryConfirmModel deliveryConfirmModel) throws ErpTransactionException {
		this.assertStatus(new EnumSaleStatus[] { EnumSaleStatus.ENROUTE});	
		this.transactions.add(deliveryConfirmModel);
		if(this.getInvoice().getAppliedGiftCards().size() > 0){
			//Gift card used on this order. set the status to POST AUTH Pending.
			this.status =  EnumSaleStatus.POST_AUTH_PENDING;
		} else {
			this.status = EnumSaleStatus.CAPTURE_PENDING;			
		}
	}
	
	public void addDeliveryConfirm(ErpDeliveryConfirmModel deliveryConfirmModel, EnumSaleStatus enumSaleStatus) throws ErpTransactionException {
		this.assertStatus(new EnumSaleStatus[] { EnumSaleStatus.ENROUTE});		
		this.transactions.add(deliveryConfirmModel);
		this.status = enumSaleStatus;
	}
	
	public void addRegisterGiftCard(ErpGiftCardTransModel registerGCModel) throws ErpTransactionException {
		this.assertStatus(new EnumSaleStatus[] { EnumSaleStatus.AUTHORIZED, EnumSaleStatus.AVS_EXCEPTION, EnumSaleStatus.ENROUTE });
		this.transactions.add(registerGCModel);
		//this.status = EnumSaleStatus.CAPTURE_PENDING;
	}
	
	public ErpRegisterGiftCardModel getRecentRegisteration() {
		
		ErpRegisterGiftCardModel regModel = null;
		List txs = new ArrayList(this.transactions);
	    //for(int i=0;i<txs.size();i++) System.out.println("ErpTransactionModel :"+((ErpTransactionModel)txs.get(i)).getTransactionDate());  
		Collections.sort(txs, ErpTransactionI.TX_DATE_COMPARATOR);
		for (Iterator i = txs.iterator(); i.hasNext();) {
			Object o = i.next();
			if (o instanceof ErpRegisterGiftCardModel) {
				regModel = (ErpRegisterGiftCardModel) o;
			}
		}
		return regModel;
	}
	
	public void addGiftCardDlvConfirm(ErpGiftCardTransModel registerGCModel) throws ErpTransactionException {
		this.assertStatus(new EnumSaleStatus[] { EnumSaleStatus.AUTHORIZED, EnumSaleStatus.AVS_EXCEPTION, EnumSaleStatus.ENROUTE,EnumSaleStatus.EMAIL_PENDING });
		this.transactions.add(registerGCModel);
		this.status = EnumSaleStatus.CAPTURE_PENDING;
	}
	
	public void addGiftCardEmailInfo(ErpGiftCardTransModel emailGCModel) throws ErpTransactionException {
		//this.assertStatus(new EnumSaleStatus[] { EnumSaleStatus.AUTHORIZED, EnumSaleStatus.AVS_EXCEPTION, EnumSaleStatus.ENROUTE });
		this.assertStatus(
		new EnumSaleStatus[] {
				EnumSaleStatus.EMAIL_PENDING,
				EnumSaleStatus.PAYMENT_PENDING,
				EnumSaleStatus.SETTLED,				
				EnumSaleStatus.SETTLEMENT_FAILED,				
				EnumSaleStatus.CAPTURE_PENDING,
				EnumSaleStatus.CHARGEBACK
		 });
		this.transactions.add(emailGCModel);
		//this.status = EnumSaleStatus.CAPTURE_PENDING;
	}

	public void addComplaint(ErpComplaintModel complaintModel) throws ErpTransactionException {
		this.assertStatus(
			new EnumSaleStatus[] {
				EnumSaleStatus.ENROUTE,
				EnumSaleStatus.PENDING,
				EnumSaleStatus.CAPTURE_PENDING,
				EnumSaleStatus.SETTLED,
				EnumSaleStatus.PAYMENT_PENDING,
				EnumSaleStatus.RETURNED });

		this.complaints.add(complaintModel);
	}

	public void updateComplaint(ErpComplaintModel newComplaint) throws ErpTransactionException {
		List allowedStatus = new ArrayList();
		allowedStatus.add(EnumSaleStatus.PENDING);
		allowedStatus.add(EnumSaleStatus.SETTLED);
		allowedStatus.add(EnumSaleStatus.PAYMENT_PENDING);
		allowedStatus.add(EnumSaleStatus.RETURNED);

		if (EnumComplaintStatus.REJECTED.equals(newComplaint.getStatus())) {
			allowedStatus.add(EnumSaleStatus.ENROUTE);
		}

		this.assertStatus(((EnumSaleStatus[]) allowedStatus.toArray(new EnumSaleStatus[allowedStatus.size()])));

		ErpComplaintModel oldComplaint = null;
		for (ListIterator<ErpComplaintModel> it = this.complaints.listIterator(); it.hasNext();) {
			oldComplaint = (ErpComplaintModel) it.next();
			if (oldComplaint.getPK().getId().equals(newComplaint.getPK().getId())) {
				//
				// We do not allow changes to complaint amounts, so make sure the values
				// for the old model matches the new model's value
				//
				if (oldComplaint.getAmount() != newComplaint.getAmount()) {
					throw new ErpTransactionException(
						"Sale "
							+ this.getPK().getId()
							+ " Updated complaint amount does not match existing complaint amount. Existing:"
							+ oldComplaint.getAmount()
							+ ", updated:"
							+ newComplaint.getAmount());
				}
				if (oldComplaint.getComplaintLines().size() != newComplaint.getComplaintLines().size()
					|| !oldComplaint.getCreatedBy().equalsIgnoreCase(newComplaint.getCreatedBy())
					|| !oldComplaint.getCreateDate().equals(newComplaint.getCreateDate())) {

					throw new ErpTransactionException(
						"Sale " + this.getPK().getId() + " Updated complaint does not match existing complaint.");

				}
				it.remove();
				it.add(newComplaint);
				break;
			}
		}
	}

	public void addChargeback(ErpChargebackModel chargebackModel) throws ErpTransactionException {
		this.assertStatus(new EnumSaleStatus[] { EnumSaleStatus.SETTLED, EnumSaleStatus.CHARGEBACK });
		copyLastCapturePaymentMethodInfo(chargebackModel);
		this.transactions.add(chargebackModel);
		this.status = EnumSaleStatus.CHARGEBACK;
	}

	public void addChargebackReversal(ErpChargebackReversalModel cbkReversal) throws ErpTransactionException {
		this.assertStatus(EnumSaleStatus.CHARGEBACK);
		copyLastCapturePaymentMethodInfo(cbkReversal);
		this.transactions.add(cbkReversal);
		double cbk = 0.0;
		double cbr = 0.0;
		for(Iterator i = this.transactions.iterator(); i.hasNext(); ) {
			Object o = i.next();
			if(o instanceof ErpChargebackModel){
				cbk = MathUtil.roundDecimal(cbk + ((ErpChargebackModel)o).getAmount());
			}

			if(o instanceof ErpChargebackReversalModel){
				cbr = MathUtil.roundDecimal(cbr + ((ErpChargebackReversalModel)o).getAmount());
			}
		}
		if(cbr >= cbk){
			this.status = EnumSaleStatus.SETTLED;
		}
	}

	public void addAdjustment(ErpAdjustmentModel adjustmentModel) throws ErpTransactionException {
		this.assertStatus(EnumSaleStatus.PAYMENT_PENDING);
		copyLastCapturePaymentMethodInfo(adjustmentModel);
		this.transactions.add(adjustmentModel);
		this.status = EnumSaleStatus.SETTLEMENT_FAILED;
	}

	public void addResubmitPayment(ErpResubmitPaymentModel model) throws ErpTransactionException {
		this.assertStatus(EnumSaleStatus.SETTLEMENT_FAILED);
		this.transactions.add(model);
	}

	public void addPreAuthorization(ErpPreAuthGiftCardModel preAuth) throws ErpTransactionException {
		this.assertStatus(

				new EnumSaleStatus[] {
				EnumSaleStatus.NEW,
				EnumSaleStatus.SUBMITTED,
				EnumSaleStatus.AUTHORIZATION_FAILED,
				EnumSaleStatus.AUTHORIZED,
				EnumSaleStatus.MODIFIED
				//EnumSaleStatus.ENROUTE, //Enroute and Refused order is required in the case of renew auth < 48 hrs.
				//EnumSaleStatus.REFUSED_ORDER
				});
		this.transactions.add(preAuth);
		
	}

	public void addCancelPreAuthorization(ErpReverseAuthGiftCardModel cancelAuth) throws ErpTransactionException {
		this.assertStatus(
			new EnumSaleStatus[] {
				EnumSaleStatus.NEW,
				EnumSaleStatus.SUBMITTED,
				EnumSaleStatus.AUTHORIZATION_FAILED,
				EnumSaleStatus.AUTHORIZED,
				EnumSaleStatus.MODIFIED
				//EnumSaleStatus.ENROUTE, //Enroute and Refused order is required in the case of renew auth < 48 hrs.
				//EnumSaleStatus.REFUSED_ORDER
				});
		this.transactions.add(cancelAuth);
		
	}

	public void addPostAuthorization(ErpPostAuthGiftCardModel postAuth) throws ErpTransactionException {
		this.assertStatus(
			new EnumSaleStatus[] {
				EnumSaleStatus.POST_AUTH_PENDING,
				});
		this.transactions.add(postAuth);
		
	}
	
	public void addAuthorization(ErpAuthorizationModel auth) throws ErpTransactionException {
		this.assertStatus(
			new EnumSaleStatus[] {
				EnumSaleStatus.NEW,
				EnumSaleStatus.SUBMITTED,
				EnumSaleStatus.AUTHORIZATION_FAILED,
				EnumSaleStatus.INPROCESS_NO_AUTHORIZATION,
				EnumSaleStatus.MODIFIED,
				EnumSaleStatus.SETTLEMENT_FAILED
				});

		if(EnumSaleStatus.SETTLEMENT_FAILED.equals(this.status) && !auth.isApproved()) {
			throw new ErpTransactionException("Cannot add failed authorization in SETTLEMENT FAILED status");
		}

		this.transactions.add(auth);

		boolean fullyAuthorized = this.isFullyAuthorized();

		if(!fullyAuthorized && auth.isApproved()) {
			return;
		} else if(!auth.isApproved()) {
			if( EnumSaleStatus.SUBMITTED.equals(this.status)||
                ((EnumSaleStatus.NEW.equals(this.status)||EnumSaleStatus.MODIFIED.equals(this.status)) && EnumSaleType.SUBSCRIPTION.equals(type))) {
                    this.status = EnumSaleStatus.AUTHORIZATION_FAILED;
            }


		} else {
			if(EnumSaleStatus.INPROCESS_NO_AUTHORIZATION.equals(this.status)) {
				this.status = EnumSaleStatus.INPROCESS;
			}else if(EnumSaleStatus.AUTHORIZATION_FAILED.equals(this.status)
				|| EnumSaleStatus.SUBMITTED.equals(this.status)){
				if(auth.hasAvsMatched()) {
					this.status = EnumSaleStatus.AUTHORIZED;
				}else{
					this.status = EnumSaleStatus.AVS_EXCEPTION;
				}
			}

		}
	}

	public void addSettlement(ErpSettlementModel settlementModel) throws ErpTransactionException {
		this.assertStatus(
			new EnumSaleStatus[] { EnumSaleStatus.PAYMENT_PENDING, EnumSaleStatus.SETTLED, EnumSaleStatus.SETTLEMENT_FAILED });

		copyLastCapturePaymentMethodInfo(settlementModel);

		this.transactions.add(settlementModel);

		if (!this.status.equals(EnumSaleStatus.SETTLED)) {
			double capturedAmt = 0.0;
			for (Iterator i = this.getGoodCaptures().iterator(); i.hasNext();) {
				Object o = i.next();
				if (o instanceof ErpCaptureModel) {
					double amount = ((ErpCaptureModel) o).getAmount();
					if (!getIsChargePayment(amount)) { // don't include any settlements pertaining to charges (i.e bounced check fee)
						capturedAmt += amount;
					}
				}
			}

			double settledAmt = 0.0;
			double stlFail = 0.0;
			for (Iterator i = this.transactions.iterator(); i.hasNext();) {
				Object o = i.next();
				if (o instanceof ErpSettlementModel) {
					settledAmt = MathUtil.roundDecimal(settledAmt + ((ErpSettlementModel) o).getAmount());
				}
				if(o instanceof ErpFailedSettlementModel) {
					stlFail = MathUtil.roundDecimal(stlFail + ((ErpFailedSettlementModel)o).getAmount());
				}
			}

			int settle = (int) Math.round(MathUtil.roundDecimal(settledAmt - stlFail) * 100);
			int capture = (int) Math.round(capturedAmt * 100);
			if (settle >= capture) {
				this.status = EnumSaleStatus.SETTLED;
			}
		}
	}

	public void addFailedSettlement(ErpFailedSettlementModel failedSettlementModel) throws ErpTransactionException {
		this.assertStatus(new EnumSaleStatus[] { EnumSaleStatus.PAYMENT_PENDING, EnumSaleStatus.SETTLED, EnumSaleStatus.SETTLEMENT_FAILED });
		copyLastCapturePaymentMethodInfo(failedSettlementModel);
		this.transactions.add(failedSettlementModel);
		this.status = EnumSaleStatus.SETTLEMENT_FAILED;
	}

	public void addChargeSettlement(ErpChargeSettlementModel chargeSettlementModel) throws ErpTransactionException {
		this.assertStatus(new EnumSaleStatus[] { EnumSaleStatus.PAYMENT_PENDING, EnumSaleStatus.SETTLED, EnumSaleStatus.SETTLEMENT_FAILED });
		copyLastCapturePaymentMethodInfo(chargeSettlementModel);
		this.transactions.add(chargeSettlementModel);
	}

	public void addFundsRedeposit(ErpFundsRedepositModel fundsRedepositModel) throws ErpTransactionException {
		this.assertStatus(new EnumSaleStatus[] { EnumSaleStatus.PAYMENT_PENDING, EnumSaleStatus.SETTLED });
		copyLastCapturePaymentMethodInfo(fundsRedepositModel);
		this.transactions.add(fundsRedepositModel);
	}

	public void addFailedChargeSettlement(ErpFailedChargeSettlementModel failedChargeSettlementModel) throws ErpTransactionException {
		this.assertStatus(new EnumSaleStatus[] { EnumSaleStatus.PAYMENT_PENDING, EnumSaleStatus.SETTLED, EnumSaleStatus.SETTLEMENT_FAILED });
		copyLastCapturePaymentMethodInfo(failedChargeSettlementModel);
		this.transactions.add(failedChargeSettlementModel);
	}

	public void addManualAuthorization(ErpAuthorizationModel authorizationModel) throws ErpTransactionException {
		this.assertStatus(EnumSaleStatus.AUTHORIZATION_FAILED);
		this.transactions.add(authorizationModel);
	}

	public void addReversal(ErpReversalModel reversalModel) throws ErpTransactionException {
		this.assertStatus(new EnumSaleStatus[] { EnumSaleStatus.AUTHORIZED, EnumSaleStatus.AVS_EXCEPTION });
		this.transactions.add(reversalModel);
	}

	public void addCashback(ErpCashbackModel cashbackModel) throws ErpTransactionException {
		this.assertStatus(EnumSaleStatus.SETTLED);
		this.transactions.add(cashbackModel);
	}

	public void addCapture(ErpCaptureModel captureModel) throws ErpTransactionException {
		this.assertStatus(new EnumSaleStatus[]
			{EnumSaleStatus.ENROUTE,
			 EnumSaleStatus.CAPTURE_PENDING,
			 EnumSaleStatus.PENDING,
			 EnumSaleStatus.REDELIVERY,
			 EnumSaleStatus.PAYMENT_PENDING,
			 EnumSaleStatus.SETTLEMENT_FAILED
			 });

		this.transactions.add(captureModel);

		// Check to see if enough of the authorized amount has been captured to cover invoice amount and if
		// this is true change the status of the sale.

		double invoiceAmt = this.getInvoice().getAmount();

		double capturedAmt = 0.0;
		for (Iterator i = this.transactions.iterator(); i.hasNext();) {
			Object o = i.next();
			if (o instanceof ErpCaptureModel) {
				capturedAmt += ((ErpCaptureModel) o).getAmount();
			}
		}
		int capture = (int) Math.round(capturedAmt * 100);
		int invoice = (int) Math.round(invoiceAmt * 100);
		if (capture >= invoice) {
			this.status = EnumSaleStatus.PAYMENT_PENDING;
		}
	}

	public void addVoidCapture(ErpVoidCaptureModel voidCapture) throws ErpTransactionException {
		this.assertStatus(new EnumSaleStatus[] {EnumSaleStatus.PAYMENT_PENDING, EnumSaleStatus.ENROUTE});
		// if status is ENROUTE already nothing needs to be done.  All captures have been voided at this point
		if (this.status != EnumSaleStatus.ENROUTE) {
			this.transactions.add(voidCapture);
			//Check that every capture has a void capture and if its equal flip the sale status back to EN-ROUTE
			int captures = this.getCaptures().size();
			int voidCaptures = this.getVoidCaptures().size();
			if (captures == voidCaptures) {
				this.status = EnumSaleStatus.ENROUTE;
			}
		}
	}

	public java.util.Date getCaptureDate() throws ErpTransactionException {
		this.assertStatus(new EnumSaleStatus[] { EnumSaleStatus.PAYMENT_PENDING, EnumSaleStatus.SETTLED });

		java.util.Date captureDate = null;
		for (Iterator i = this.transactions.iterator(); i.hasNext();) {
			Object obj = i.next();
			if (obj instanceof ErpCaptureModel) {
				captureDate = ((ErpCaptureModel) obj).getTransactionDate();
				break;
			}
		}
		if (captureDate == null) {
			throw new ErpTransactionException("No Capture Found");
		}
		return captureDate;
	}

	public List getCaptures() {
		List captures = new ArrayList();
		for (Iterator i = this.transactions.iterator(); i.hasNext();) {
			Object o = i.next();
			if (o instanceof ErpCaptureModel) {
				captures.add(o);
			}
		}
		return captures;
	}

	public List getVoidCaptures() {
		List voidCaptures = new ArrayList();
		for (Iterator i = this.transactions.iterator(); i.hasNext();) {
			Object o = i.next();
			if (o instanceof ErpVoidCaptureModel) {
				voidCaptures.add(o);
			}
		}
		return voidCaptures;
	}

	public List getSettlements() throws ErpTransactionException {
		this.assertStatus(new EnumSaleStatus[] { EnumSaleStatus.SETTLED, EnumSaleStatus.SETTLEMENT_FAILED, EnumSaleStatus.CHARGEBACK });
		List settlements = new ArrayList();
		for (Iterator i = this.transactions.iterator(); i.hasNext();) {
			Object o = i.next();
			if (o instanceof ErpSettlementModel) {
				settlements.add(o);
			}
		}
		return settlements;
	}

	public List getAdjustments() throws ErpTransactionException {
		this.assertStatus(new EnumSaleStatus[] { EnumSaleStatus.SETTLED, EnumSaleStatus.SETTLEMENT_FAILED });
		List adjustments = new ArrayList();
		for (Iterator i = this.transactions.iterator(); i.hasNext();) {
			Object o = i.next();
			if (o instanceof ErpAdjustmentModel) {
				adjustments.add(o);
			}
		}
		return adjustments;
	}

	public void forcePaymentStatus() throws ErpTransactionException {
		this.assertStatus(
			new EnumSaleStatus[] {
				EnumSaleStatus.ENROUTE,
				EnumSaleStatus.PAYMENT_PENDING,
				EnumSaleStatus.CAPTURE_PENDING,
				EnumSaleStatus.PENDING,
				EnumSaleStatus.REDELIVERY });

		ErpInvoiceModel invoice = this.getInvoice();
		if (((int) Math.round(invoice.getAmount() * 100)) == 0) {
			this.status = EnumSaleStatus.SETTLED;
		} else {
			this.status = EnumSaleStatus.PAYMENT_PENDING;
		}
	}

	public void forceSettlement() throws ErpTransactionException {
		this.assertStatus(
			new EnumSaleStatus[] {
					EnumSaleStatus.SETTLEMENT_PENDING
			});

		this.status = EnumSaleStatus.SETTLED;
	}
	
	public void cutoff() throws ErpTransactionException {
		this.assertStatus(new EnumSaleStatus[] { EnumSaleStatus.AUTHORIZED, EnumSaleStatus.AVS_EXCEPTION });
		this.status = EnumSaleStatus.INPROCESS;
	}


	public void emailPending() throws ErpTransactionException {		
		this.assertStatus(new EnumSaleStatus[] { EnumSaleStatus.ENROUTE});
		this.status = EnumSaleStatus.EMAIL_PENDING;
	}


	public void setGiftCardRegPending() throws ErpTransactionException {		
		this.assertStatus(new EnumSaleStatus[] { EnumSaleStatus.AUTHORIZED, EnumSaleStatus.AVS_EXCEPTION, EnumSaleStatus.ENROUTE });
		this.status = EnumSaleStatus.REG_PENDING;
	}

	
	
	public PrimaryKey getCustomerPk() {
		return this.customerPk;
	}

	public EnumSaleStatus getStatus() {
		return this.status;
	}

	public String getSapOrderNumber() {
		return this.sapOrderNumber;
	}

	public Collection getTransactions() {
		return Collections.unmodifiableCollection(this.transactions);
	}

	public ErpAbstractOrderModel getRecentOrderTransaction() {
		// get transaction sorted by date
		List txList = new ArrayList(this.transactions);
		Collections.sort(txList, ErpTransactionModel.TX_DATE_COMPARATOR);

		// find the current state (last create or modify tx)
		ErpAbstractOrderModel lastOrder = null;
		for (Iterator i = txList.iterator(); i.hasNext();) {
			Object o = i.next();
			if (o instanceof ErpAbstractOrderModel) {
				lastOrder = (ErpAbstractOrderModel) o;
			}
		}
		return lastOrder;
	}

	public Collection<ErpComplaintModel> getComplaints() {
		return Collections.unmodifiableCollection(this.complaints);
	}

	public ErpComplaintModel getComplaint(String complaintId) {
		for (ErpComplaintModel cm : this.complaints) {
			if (cm.getPK().getId().equals(complaintId)) {
				return cm;
			}
		}
		return null;
	}

	public List getAuthorizations() {
		List auths = new ArrayList();
		for (Iterator i = this.transactions.iterator(); i.hasNext();) {
			Object obj = i.next();
			if (obj instanceof ErpAuthorizationModel) {
				auths.add(obj);
			}
		}
		return Collections.unmodifiableList(auths);
	}

	public ErpGiftCardDlvConfirmModel getGCDeliveryConfirmation(){
		for (Iterator i = this.transactions.iterator(); i.hasNext();) {
			Object obj = i.next();
			if (obj instanceof ErpGiftCardDlvConfirmModel) {
				return (ErpGiftCardDlvConfirmModel)obj;
			}
		}
		return null;
		
	}

	public List getGCResendEmailTransaction(){
		List resendTransactions = new ArrayList();
		for (Iterator i = this.transactions.iterator(); i.hasNext();) {
			Object obj = i.next();
			if (obj instanceof ErpEmailGiftCardModel) {
				resendTransactions.add(obj);
			}
		}
		return Collections.unmodifiableList(resendTransactions);
		
	}
	
	public List getGCTransactions() {
		List auths = new ArrayList();
		for (Iterator i = this.transactions.iterator(); i.hasNext();) {
			Object obj = i.next();
			if (obj instanceof ErpPreAuthGiftCardModel ||
					obj instanceof ErpReverseAuthGiftCardModel ||
					obj instanceof ErpPostAuthGiftCardModel) {
					auths.add(obj);
			}
		}
		return Collections.unmodifiableList(auths);
	}

	public List getGCAuthorizations(ErpPaymentMethodI pm) {
		List auths = new ArrayList();
		for (Iterator i = this.transactions.iterator(); i.hasNext();) {
			Object obj = i.next();
			if (obj instanceof ErpPreAuthGiftCardModel) {
				ErpPreAuthGiftCardModel auth = (ErpPreAuthGiftCardModel)obj;
				if(auth.getCertificateNum().equals(pm.getCertificateNumber()))
					auths.add(obj);
			}
		}
		return Collections.unmodifiableList(auths);
	}
	
	public List getGCReverseAuthorizations(ErpPaymentMethodI pm) {
		List auths = new ArrayList();
		for (Iterator i = this.transactions.iterator(); i.hasNext();) {
			Object obj = i.next();
			if (obj instanceof ErpReverseAuthGiftCardModel) {
				ErpReverseAuthGiftCardModel rauth = (ErpReverseAuthGiftCardModel)obj;
				if(rauth.getCertificateNum().equals(pm.getCertificateNumber()))
					auths.add(obj);

			}
		}
		return Collections.unmodifiableList(auths);
	}
	
	private List getGCReversePreAuthcodes(ErpPaymentMethodI pm) {
		List authCodes = new ArrayList();
		for (Iterator i = this.transactions.iterator(); i.hasNext();) {
			Object obj = i.next();
			if (obj instanceof ErpReverseAuthGiftCardModel) {
				ErpReverseAuthGiftCardModel rauth = (ErpReverseAuthGiftCardModel)obj;
				if(rauth.getCertificateNum().equals(pm.getCertificateNumber()))
					authCodes.add(rauth.getPreAuthCode());
			}
		}
		return Collections.unmodifiableList(authCodes);
	}

	private List getGCReversePreAuthcodes() {
		List authCodes = new ArrayList();
		for (Iterator i = this.transactions.iterator(); i.hasNext();) {
			Object obj = i.next();
			if (obj instanceof ErpReverseAuthGiftCardModel) {
				ErpReverseAuthGiftCardModel rauth = (ErpReverseAuthGiftCardModel)obj;
				authCodes.add(rauth.getPreAuthCode());
			}
		}
		return Collections.unmodifiableList(authCodes);
	}
	
	public boolean hasValidPostAuth(ErpPaymentMethodI pm, String preAuthCode) {
		List authCodes = new ArrayList();
		for (Iterator i = this.transactions.iterator(); i.hasNext();) {
			Object obj = i.next();
			if (obj instanceof ErpPostAuthGiftCardModel) {
				ErpPostAuthGiftCardModel pauth = (ErpPostAuthGiftCardModel)obj;
				if(pauth.getCertificateNum().equals(pm.getCertificateNumber()) && pauth.getPreAuthCode().equals(preAuthCode))
					return true;
			}
		}
		return false;
	}
	
	public List getPendingGCAuthorizations(ErpPaymentMethodI pm) {
		List pAuths = new ArrayList();
		List auths = getGCAuthorizations(pm);
		//List reverseAuthCodes = getGCReversePreAuthcodes(pm);
		for (Iterator i = auths.iterator(); i.hasNext();) {
			ErpPreAuthGiftCardModel auth = (ErpPreAuthGiftCardModel)i.next();
			if(auth.getCertificateNum().equals(pm.getCertificateNumber()) //&& !reverseAuthCodes.contains(auth.getAuthCode()) 
						&& auth.isPending()){
				pAuths.add(auth);
			}
		}
		return Collections.unmodifiableList(pAuths);
	}
	
	public List getPendingGCAuthorizations() {
		List pAuths = new ArrayList();
		for (Iterator i = this.transactions.iterator(); i.hasNext();) {
			Object obj = i.next();
			if (obj instanceof ErpPreAuthGiftCardModel) {
				ErpPreAuthGiftCardModel auth = (ErpPreAuthGiftCardModel)obj;
				if(auth.isPending())
					pAuths.add(obj);
			}
		}
		return Collections.unmodifiableList(pAuths);
		
	}
	public List getValidGCAuthorizations() {
		List pAuths = new ArrayList();
		List reverseAuthCodes = getGCReversePreAuthcodes();
		for (Iterator i = this.transactions.iterator(); i.hasNext();) {
			Object obj = i.next();
			if (obj instanceof ErpPreAuthGiftCardModel) {
				ErpPreAuthGiftCardModel auth = (ErpPreAuthGiftCardModel)obj;
				if(!reverseAuthCodes.contains(auth.getAuthCode())&& !auth.isCancelled() && !auth.isDeclined())
					pAuths.add(obj);
			}
		}
		return Collections.unmodifiableList(pAuths);
	}
	public List getValidGCPostAuthorizations() {
		List pAuths = new ArrayList();
		for (Iterator i = this.transactions.iterator(); i.hasNext();) {
			Object obj = i.next();
			if (obj instanceof ErpPostAuthGiftCardModel) {
				ErpPostAuthGiftCardModel pauth = (ErpPostAuthGiftCardModel)obj;
				if(pauth.isApproved() || pauth.isDeclined())
					pAuths.add(obj);
			}
		}
		return Collections.unmodifiableList(pAuths);
	}
	public List getPendingGCReverseAuths(ErpPaymentMethodI pm) {
		List rauths = new ArrayList();
		for (Iterator i = this.transactions.iterator(); i.hasNext();) {
			Object obj = i.next();
			if (obj instanceof ErpReverseAuthGiftCardModel) {
				ErpReverseAuthGiftCardModel rauth = (ErpReverseAuthGiftCardModel)obj;
				if(rauth.getCertificateNum().equals(pm.getCertificateNumber()) && rauth.isPending())
					rauths.add(obj);

			}
		}
		return Collections.unmodifiableList(rauths);
	}
	
	public List getValidGCAuthorizations(ErpPaymentMethodI pm) {
		List vAuths = new ArrayList();
		List auths = getGCAuthorizations(pm);
		List reverseAuthCodes = getGCReversePreAuthcodes(pm);
		for (Iterator i = auths.iterator(); i.hasNext();) {
			ErpPreAuthGiftCardModel auth = (ErpPreAuthGiftCardModel)i.next();
			if(auth.getCertificateNum().equals(pm.getCertificateNumber()) && !reverseAuthCodes.contains(auth.getAuthCode()) 
						&& !auth.isCancelled() && !auth.isDeclined()){
				vAuths.add(auth);
			}
		}
		return Collections.unmodifiableList(vAuths);
	}
	
	public void addGCAuthorization(ErpPreAuthGiftCardModel auth) throws ErpTransactionException{
		this.assertStatus(
				new EnumSaleStatus[] {
					EnumSaleStatus.NEW,
					EnumSaleStatus.SUBMITTED,
					EnumSaleStatus.AUTHORIZED,
					EnumSaleStatus.MODIFIED,
					});
		this.transactions.add(auth);
	}
	
	
	public void addGCBalanceTransfer(ErpGiftCardTransModel auth) throws ErpTransactionException{
		this.assertStatus(
				new EnumSaleStatus[] {					
					EnumSaleStatus.SETTLED,
					EnumSaleStatus.CAPTURE_PENDING,
					EnumSaleStatus.PAYMENT_PENDING
					});
		this.transactions.add(auth);
	}
	
	
	public void cancelGCAuthorization(ErpPreAuthGiftCardModel auth) throws ErpTransactionException{
		this.assertStatus(
				new EnumSaleStatus[] {
					EnumSaleStatus.NEW,
					EnumSaleStatus.SUBMITTED,
					EnumSaleStatus.AUTHORIZED,
					EnumSaleStatus.MODIFIED,
					EnumSaleStatus.MODIFIED_CANCELED,
					EnumSaleStatus.CANCELED					
					});
		int i = this.transactions.indexOf(auth);
		auth.setGcTransactionStatus(EnumGiftCardTransactionStatus.CANCEL);
		this.transactions.set(i, auth);
	}
	
	public void addReverseGCAuthorization(ErpReverseAuthGiftCardModel rauth) throws ErpTransactionException{
		this.assertStatus(
				new EnumSaleStatus[] {
					EnumSaleStatus.NEW,
					EnumSaleStatus.SUBMITTED,
					EnumSaleStatus.AUTHORIZED,
					EnumSaleStatus.MODIFIED,
					EnumSaleStatus.MODIFIED_CANCELED,					
					EnumSaleStatus.CANCELED,			
					EnumSaleStatus.POST_AUTH_PENDING
					});
		this.transactions.add(rauth);
	}
	
	public void updateGCAuthorization(ErpGiftCardAuthModel auth) throws ErpTransactionException{
		this.assertStatus(
				new EnumSaleStatus[] {
					EnumSaleStatus.NEW,
					EnumSaleStatus.SUBMITTED,
					EnumSaleStatus.AUTHORIZED,
					EnumSaleStatus.MODIFIED,
					EnumSaleStatus.POST_AUTH_PENDING
					});
		
		int i = this.transactions.indexOf(auth);
		this.transactions.set(i, auth);
	}

	public void markAsCapturePending() throws ErpTransactionException {
		this.assertStatus(EnumSaleStatus.POST_AUTH_PENDING);
		this.status = EnumSaleStatus.CAPTURE_PENDING;
	} 

	/*
	 * This method is only used in the case of gro orders that has gift payments only.
	 */
	public void markAsSettlementPending() throws ErpTransactionException {
		this.assertStatus(EnumSaleStatus.PAYMENT_PENDING);
		this.status = EnumSaleStatus.SETTLEMENT_PENDING;
	}
	
	public List getFailedAuthorizations() {
		List failedAuths = new ArrayList();
		ErpAuthorizationModel authorization = null;
		for (Iterator i = this.transactions.iterator(); i.hasNext();) {
			Object obj = i.next();
			if (obj instanceof ErpAuthorizationModel) {
				authorization = (ErpAuthorizationModel) obj;
				if (!EnumPaymentResponse.APPROVED.equals(authorization.getResponseCode())) {
					failedAuths.add(authorization);
				}
			}
		}
		return Collections.unmodifiableList(failedAuths);
	}

	public boolean hasInvoice() {
		for (Iterator i = this.transactions.iterator(); i.hasNext();) {
			Object obj = i.next();
			if (obj instanceof ErpInvoiceModel) {
				return true;
			}
		}
		return false;
	}

	public List getInvoices() {

		List invoices = new ArrayList();
		for (Iterator i = this.transactions.iterator(); i.hasNext();) {
			Object obj = i.next();
			if (obj instanceof ErpInvoiceModel) {
				invoices.add(obj);
			}
		}

		Collections.sort(invoices, ErpTransactionModel.TX_DATE_COMPARATOR);
		return Collections.unmodifiableList(invoices);
	}

	public ErpInvoiceModel getFirstInvoice() {
		List invoices = this.getInvoices();
		if (invoices.size() == 0) {
			return null;
		}

		return (ErpInvoiceModel) invoices.get(0);
	}

	public ErpInvoiceModel getLastInvoice() {
		List invoices = this.getInvoices();
		if (invoices.isEmpty()) {
			return null;
		}
		return (ErpInvoiceModel) invoices.get(invoices.size() - 1);
	}

	public int getNumberOfInvoices() {
		return this.getInvoices().size();
	}

	public ErpShippingInfo getShippingInfo() {
		return this.shippingInfo;
	}

	public Set getUsedPromotionCodes() {
		return Collections.unmodifiableSet(this.usedPromotionCodes);
	}
	public boolean hasUsedPromotionCodes() {
		if((usedPromotionCodes!=null))
			return true;
		return false;
	}
	public List getCartonInfo() {
		return cartonInfo;
	}


	public ErpChargeInvoiceModel getChargeInvoice() {

		ErpChargeInvoiceModel lastChargeInvoice = null;
		List txs = new ArrayList(this.transactions);
		Collections.sort(txs, ErpTransactionI.TX_DATE_COMPARATOR);
		for (Iterator i = txs.iterator(); i.hasNext();) {
			Object o = i.next();
			if (o instanceof ErpChargeInvoiceModel) {
				lastChargeInvoice = (ErpChargeInvoiceModel) o;
			}
		}
		return lastChargeInvoice;
	}

	public  boolean getIsChargePayment(String authId) {

		for (Iterator i = this.transactions.iterator(); i.hasNext();) {
			Object obj = i.next();
			if (obj instanceof ErpAuthorizationModel) {
				ErpAuthorizationModel auth = ((ErpAuthorizationModel) obj);
				if (authId.equalsIgnoreCase(auth.getAuthCode()) && auth.getIsChargePayment()) {
					return true;
				}
			}
		}

		return false;

	}

	public  boolean getIsChargePayment(double chargeAmount) {

			for (Iterator i = this.transactions.iterator(); i.hasNext();) {
				Object obj = i.next();
				if (obj instanceof ErpAuthorizationModel) {
					ErpAuthorizationModel auth = ((ErpAuthorizationModel) obj);
					if (auth.getIsChargePayment() && MathUtil.roundDecimal(chargeAmount) == MathUtil.roundDecimal(auth.getAmount())) {
						return true;
					}
				}
			}

			return false;

		}

	public boolean hasChargeSettlement() {

		for (Iterator i = this.transactions.iterator(); i.hasNext();) {
			Object obj = i.next();
			if (obj instanceof ErpChargeSettlementModel) {
				return true;
			}
		}
		return false;
	}

	public boolean hasFundsRedeposit() {

		for (Iterator i = this.transactions.iterator(); i.hasNext();) {
			Object obj = i.next();
			if (obj instanceof ErpFundsRedepositModel) {
				return true;
			}
		}
		return false;
	}

	public EnumTransactionType getCurrentTransactionType() {

		List txs = new ArrayList(this.transactions);
		Collections.sort(txs, ErpTransactionI.TX_DATE_COMPARATOR);
		if (txs != null && txs.size() > 0) {
			return ((ErpTransactionModel)(txs.get(txs.size()-1))).getTransactionType();
		}
		return null;
	}

	public List getFailedSettlements() {
		List failedSettlements = new ArrayList();
		for (Iterator i = this.transactions.iterator(); i.hasNext();) {
			Object o = i.next();
			if (o instanceof ErpFailedSettlementModel) {
				failedSettlements.add(o);
			}
		}
		return failedSettlements;
	}

	public List getChargeSettlements() {
		List chargeSettlements = new ArrayList();
		for (Iterator i = this.transactions.iterator(); i.hasNext();) {
			Object o = i.next();
			if (o instanceof ErpChargeSettlementModel) {
				chargeSettlements.add(o);
			}
		}
		return chargeSettlements;
	}

	public List getFundsRedeposits() {
		List fundsRedeposits = new ArrayList();
		for (Iterator i = this.transactions.iterator(); i.hasNext();) {
			Object o = i.next();
			if (o instanceof ErpFundsRedepositModel) {
				fundsRedeposits.add(o);
			}
		}
		return fundsRedeposits;
	}

	public List getFailedChargeSettlements() {
		List failedChargeSettlements = new ArrayList();
		for (Iterator i = this.transactions.iterator(); i.hasNext();) {
			Object o = i.next();
			if (o instanceof ErpFailedChargeSettlementModel) {
				failedChargeSettlements.add(o);
			}
		}
		return failedChargeSettlements;
	}

	public void reverseChargePayment() throws ErpTransactionException {
		this.assertStatus(
			new EnumSaleStatus[] {
				EnumSaleStatus.ENROUTE,
				EnumSaleStatus.PAYMENT_PENDING
				});
		this.status = EnumSaleStatus.SETTLEMENT_FAILED;
	}

	public List getGoodCaptures() {

		ArrayList goodCaptures = new ArrayList();
		List voidCaptures = this.getVoidCaptures();
		List failedSettlements = this.getFailedSettlements();

		for(Iterator iterCaptures = this.getCaptures().iterator(); iterCaptures.hasNext(); ){
			ErpCaptureModel cm = (ErpCaptureModel) iterCaptures.next();
			boolean found = false;
			for(Iterator iterVoidCaptures = voidCaptures.iterator(); iterVoidCaptures.hasNext(); ){
				ErpVoidCaptureModel vcm = (ErpVoidCaptureModel) iterVoidCaptures.next();
				if (MathUtil.roundDecimal(cm.getAmount()) == MathUtil.roundDecimal(vcm.getAmount())
				&& cm.getPaymentMethodType().equals(vcm.getPaymentMethodType())
				&& (cm.getCcNumLast4() != null && cm.getCcNumLast4().equals(vcm.getCcNumLast4()))) {
					voidCaptures.remove(vcm);
					found = true;
					break;
				}
			}
			if (!found) {
				for(Iterator iterFailedSettlements = failedSettlements.iterator(); iterFailedSettlements.hasNext(); ){
					ErpFailedSettlementModel fsm = (ErpFailedSettlementModel) iterFailedSettlements.next();
					if (MathUtil.roundDecimal(cm.getAmount()) == MathUtil.roundDecimal(fsm.getAmount())
					&& cm.getPaymentMethodType().equals(fsm.getPaymentMethodType())
					&& (cm.getCcNumLast4() != null && cm.getCcNumLast4().equals(fsm.getCcNumLast4()))) {
						failedSettlements.remove(fsm);
						found = true;
						break;
					}
				}
			}
			if (!found) {
				goodCaptures.add(cm);
			}
		}

		return goodCaptures;
	}


	public boolean getIsSettlementFailedAfterSettled() {

		if(EnumSaleStatus.SETTLEMENT_FAILED.equals(this.status)){
			return true;
		}

		List txs = new ArrayList(this.transactions);
		Collections.sort(txs, ErpTransactionI.TX_DATE_COMPARATOR);
		int failSettlements = 0;
		int settlements = 0;
		boolean stf = false;

		for (Iterator i = txs.iterator(); i.hasNext();) {
			Object o = i.next();
			if (o instanceof ErpFailedSettlementModel) {
				failSettlements++;
				stf = true;
			}
			if (o instanceof ErpSettlementModel && stf) {
				settlements++;
			}
		}

		return stf ? failSettlements >= settlements : false;
	}

	private void copyLastCapturePaymentMethodInfo(ErpPaymentModel destPaymentModel) {

		if (destPaymentModel != null) {
			List txs = new ArrayList(this.transactions);
			Collections.sort(txs, ErpTransactionI.TX_DATE_COMPARATOR);
			Collections.reverse(txs);
			// get the last captured
			for (Iterator i = txs.iterator(); i.hasNext();) {
				Object o = i.next();
				if (o instanceof ErpCaptureModel) {
					ErpCaptureModel captureModel = (ErpCaptureModel) o;
					destPaymentModel.setPaymentMethodType(captureModel.getPaymentMethodType());
					destPaymentModel.setCcNumLast4(captureModel.getCcNumLast4());
					destPaymentModel.setCardType(captureModel.getCardType());
					destPaymentModel.setAbaRouteNumber(captureModel.getAbaRouteNumber());
					destPaymentModel.setBankAccountType(captureModel.getBankAccountType());
					break;
				}
			}
		}

	}

	public int getNumberOfCaptures(){
		List l = this.getGoodCaptures();
		for(ListIterator i = l.listIterator(); i.hasNext();) {
			ErpCaptureModel c = (ErpCaptureModel) i.next();
			if(this.getIsChargePayment(c.getAmount())){
				i.remove();
			}
		}
		return l.size();
	}

	public List getCashbacks(){
		return this.filterTransaction(ErpCashbackModel.class);
	}

	public ErpSettlementModel getSettlement (ErpAffiliate affiliate, double amount, String authCode) {
		List l = this.filterTransaction(ErpSettlementModel.class);
		ErpSettlementModel model = null;
		for(Iterator i = l.iterator(); i.hasNext(); ) {
			ErpSettlementModel m = (ErpSettlementModel) i.next();
			if(m.getAffiliate().equals(affiliate) && m.getAmount() == amount && authCode != null && authCode.equals(m.getAuthCode())) {
				model = m;
				break;
			}
		}

		return model;
	}

	public ErpFailedSettlementModel getLastFailSettlement() {
		List l = this.filterTransaction(ErpFailedSettlementModel.class);
		if(l.isEmpty()) {
			return null;
		}

		return (ErpFailedSettlementModel) l.get(l.size() - 1);
	}

	public ErpChargebackModel getLastChargeback(){
		List l = this.filterTransaction(ErpChargebackModel.class);
		if(l.isEmpty()) {
			return null;
		}

		return (ErpChargebackModel) l.get(l.size() - 1);
	}

	public ErpChargebackReversalModel getLastChargebackReversal(){
		List l = this.filterTransaction(ErpChargebackReversalModel.class);
		if(l.isEmpty()) {
			return null;
		}

		return (ErpChargebackReversalModel)l.get(l.size() - 1);
	}

	public ErpChargeSettlementModel getLastChargeSettlement() {
		List l = this.filterTransaction(ErpChargeSettlementModel.class);
		if(l.isEmpty()) {
			return null;
		}

		return (ErpChargeSettlementModel) l.get(l.size() - 1);
	}

	public boolean hasSplitTransaction() {
		boolean fd = false;
		boolean bc = false;
		boolean usq = false;
		
		final ErpAffiliate fdAff = ErpAffiliate.getPrimaryAffiliate();
		final ErpAffiliate bcAff = ErpAffiliate.getEnum(ErpAffiliate.CODE_BC);
		final ErpAffiliate usqAff = ErpAffiliate.getEnum(ErpAffiliate.CODE_USQ);
		
		for(Iterator i = this.getGoodCaptures().iterator(); i.hasNext(); ){
			ErpCaptureModel c = (ErpCaptureModel) i.next();
			if(fdAff.equals(c.getAffiliate())) {
				fd = true;
			}

			if(bcAff.equals(c.getAffiliate())) {
				bc = true;
			}
			if(usqAff.equals(c.getAffiliate())) {
				usq = true;
			}

		}

		return fd && (bc || usq);
	}

	public String getPreviousSettlementId(ErpAbstractSettlementModel settlement, boolean stlForStf) {
		List l = this.filterTransaction(ErpSettlementModel.class);
		String id = "";
		for(Iterator i = l.iterator(); i.hasNext(); ){
			ErpSettlementModel s = (ErpSettlementModel) i.next();
			if(MathUtil.roundDecimal(s.getAmount()) == MathUtil.roundDecimal(settlement.getAmount()) && s.getAffiliate().equals(settlement.getAffiliate())
				&& (s.getCcNumLast4().equals(settlement.getCcNumLast4()) || stlForStf)){
				id = s.getPK().getId();
				break;
			}
		}

		return id;
	}

	public String getCashbackId(ErpAffiliate affiliate, double amount) {
		for(Iterator i = this.getCashbacks().iterator(); i.hasNext(); ){
			ErpCashbackModel c = (ErpCashbackModel) i.next();
			if(c.getAffiliate().equals(affiliate) && MathUtil.roundDecimal(amount) == MathUtil.roundDecimal(c.getAmount())) {
				return c.getPK().getId();
			}
		}

		return null;
	}
	
	public EnumSaleType getType() {
		return type;
	}
	
	public double getSubTotal() {
		return this.subTotal;
	}
	
	public EnumDeliveryType getDeliveryType() {
		return this.deliveryType;
	}
	
	public void setDeliveryType(EnumDeliveryType deliveryType) {
		this.deliveryType = deliveryType;
	}
	
	public Date getCreateDate(){
		return this.createDate;
	}
	
	public void setCreateDate(Date createDate) {
		this.createDate = createDate;
	}

}

