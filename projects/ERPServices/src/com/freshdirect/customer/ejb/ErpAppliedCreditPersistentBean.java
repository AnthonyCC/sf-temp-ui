/* Generated by Together */

package com.freshdirect.customer.ejb;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import com.freshdirect.affiliate.ErpAffiliate;
import com.freshdirect.customer.ErpAppliedCreditModel;
import com.freshdirect.framework.core.ModelI;
import com.freshdirect.framework.core.PrimaryKey;

/**
 * ErpAppliedCredit persistent bean.
 * @version    $Revision$
 * @author     $Author$
 * @stereotype fd-persistent
 */
public class ErpAppliedCreditPersistentBean extends ErpReadOnlyPersistentBean {
	
	private ErpAppliedCreditModel model;

	/** Default constructor. */
	public ErpAppliedCreditPersistentBean() {
		super();
		this.model = new ErpAppliedCreditModel();
	}

	/** Load constructor. */
	public ErpAppliedCreditPersistentBean(PrimaryKey pk, Connection conn) throws SQLException {
		this();
		this.setPK(pk);
		load(conn);
	}

	/**
	 * Copy constructor, from model.
	 * @param bean ErpAppliedCreditModel to copy from
	 */
	public ErpAppliedCreditPersistentBean(ErpAppliedCreditModel model) {
		this();
		this.setFromModel(model);
	}
	
	public PrimaryKey getPK() {
		return this.model.getPK();
	}
	
	public void setPK(PrimaryKey pk) {
		this.model.setPK(pk);
	}

	/**
	 * Copy into model.
	 * @return ErpAppliedCreditModel object.
	 */
	public ModelI getModel() {
		return this.model.deepCopy();
	}

	/** Copy from model. */
	public void setFromModel(ModelI model) {
		this.model = (ErpAppliedCreditModel)model;
	}

	/**
	 * Find ErpAppliedCreditPersistentBean objects for a given parent.
	 * @param conn the database connection to operate on
	 * @param parentPK primary key of parent
	 * @return a List of ErpAppliedCreditPersistentBean objects (empty if found none).
	 * @throws SQLException if any problems occur talking to the database
	 */
	public static List findByParent(Connection conn, PrimaryKey parentPK) throws SQLException {
		java.util.List lst = new java.util.LinkedList();
		PreparedStatement ps = conn.prepareStatement("SELECT ID FROM CUST.APPLIEDCREDIT WHERE SALESACTION_ID=?");
		ps.setString(1, parentPK.getId());
		ResultSet rs = ps.executeQuery();
		while (rs.next()) {
			ErpAppliedCreditPersistentBean bean = new ErpAppliedCreditPersistentBean(new PrimaryKey(rs.getString(1)), conn);
			bean.setParentPK(parentPK);
			lst.add(bean);
		}
		rs.close();
		ps.close();
		return lst;
	}

	public PrimaryKey create(Connection conn) throws SQLException {
		String id = this.getNextId(conn, "CUST");
		PreparedStatement ps = conn.prepareStatement("INSERT INTO CUST.APPLIEDCREDIT (ID, SALESACTION_ID, AMOUNT, DEPARTMENT, CUSTOMERCREDIT_ID, SAP_NUMBER, AFFILIATE) values (?,?,?,?,?,?,?)");
		ps.setString(1, id);
		ps.setString(2, this.getParentPK().getId());
		ps.setBigDecimal(3, new BigDecimal(String.valueOf(this.model.getAmount())));
		ps.setString(4, this.model.getDepartment());
		ps.setString(5, this.model.getCustomerCreditPk().getId());
		ps.setString(6, this.model.getSapNumber());
		ps.setString(7, this.model.getAffiliate().getCode());
		if (ps.executeUpdate() != 1) {
			throw new SQLException("Row not created");
		}
		this.setPK(new PrimaryKey(id));
		ps.close();

		this.unsetModified();
		return this.getPK();
	}

	public void load(Connection conn) throws SQLException {
		PreparedStatement ps = conn.prepareStatement("SELECT AMOUNT, DEPARTMENT, CUSTOMERCREDIT_ID, SAP_NUMBER, AFFILIATE FROM CUST.APPLIEDCREDIT WHERE ID=?");
		ps.setString(1, this.getPK().getId());
		ResultSet rs = ps.executeQuery();
		if (rs.next()) {
			ErpAffiliate a = ErpAffiliate.getEnum(rs.getString("AFFILIATE"));
			this.model.setAffiliate(a == null ? ErpAffiliate.getEnum(ErpAffiliate.CODE_FD) : a);
			this.model.setAmount(rs.getDouble("AMOUNT"));
			this.model.setDepartment(rs.getString("DEPARTMENT"));
			this.model.setCustomerCreditPk(new PrimaryKey(rs.getString("CUSTOMERCREDIT_ID")));
			this.model.setSapNumber(rs.getString("SAP_NUMBER"));
		} else {
			throw new SQLException("No such ErpAppliedCredit PK: " + this.getPK());
		}
		rs.close();
		ps.close();

		this.unsetModified();
	}
}
