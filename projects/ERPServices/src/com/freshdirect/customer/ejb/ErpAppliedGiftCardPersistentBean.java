/* Generated by Together */

package com.freshdirect.customer.ejb;

import java.sql.*;
import com.freshdirect.framework.core.*;
import com.freshdirect.giftcard.ErpAppliedGiftCardModel;
import com.freshdirect.giftcard.ErpGiftCardUtil;
import com.freshdirect.affiliate.ErpAffiliate;
import com.freshdirect.customer.ErpAppliedCreditModel;
import java.util.List;

/**
 * ErpAppliedCredit persistent bean.
 * @version    $Revision$
 * @author     $Author$
 * @stereotype fd-persistent
 */
public class ErpAppliedGiftCardPersistentBean extends ErpReadOnlyPersistentBean {
	
	private ErpAppliedGiftCardModel model;

	/** Default constructor. */
	public ErpAppliedGiftCardPersistentBean() {
		super();
		this.model = new ErpAppliedGiftCardModel();
	}

	/** Load constructor. */
	public ErpAppliedGiftCardPersistentBean(PrimaryKey pk, Connection conn) throws SQLException {
		this();
		this.setPK(pk);
		load(conn);
	}

	/**
	 * Copy constructor, from model.
	 * @param bean ErpAppliedCreditModel to copy from
	 */
	public ErpAppliedGiftCardPersistentBean(ErpAppliedGiftCardModel model) {
		this();
		this.setFromModel(model);
	}
	
	public PrimaryKey getPK() {
		return this.model.getPK();
	}
	
	public void setPK(PrimaryKey pk) {
		this.model.setPK(pk);
	}

	/**
	 * Copy into model.
	 * @return ErpAppliedCreditModel object.
	 */
	public ModelI getModel() {
		return this.model.deepCopy();
	}

	/** Copy from model. */
	public void setFromModel(ModelI model) {
		this.model = (ErpAppliedGiftCardModel)model;
	}

	/**
	 * Find ErpAppliedCreditPersistentBean objects for a given parent.
	 * @param conn the database connection to operate on
	 * @param parentPK primary key of parent
	 * @return a List of ErpAppliedCreditPersistentBean objects (empty if found none).
	 * @throws SQLException if any problems occur talking to the database
	 */
	public static List findByParent(Connection conn, PrimaryKey parentPK) throws SQLException {
		java.util.List lst = new java.util.LinkedList();
		PreparedStatement ps = conn.prepareStatement("SELECT ID FROM CUST.APPLIED_GIFT_CARD WHERE SALESACTION_ID=?");
		ps.setString(1, parentPK.getId());
		ResultSet rs = ps.executeQuery();
		while (rs.next()) {
			ErpAppliedGiftCardPersistentBean bean = new ErpAppliedGiftCardPersistentBean(new PrimaryKey(rs.getString(1)), conn);
			bean.setParentPK(parentPK);
			lst.add(bean);
		}
		rs.close();
		ps.close();
		return lst;
	}

	public PrimaryKey create(Connection conn) throws SQLException {
		String id = this.getNextId(conn, "CUST");
		PreparedStatement ps = conn.prepareStatement("INSERT INTO CUST.APPLIED_GIFT_CARD (ID, SALESACTION_ID, AMOUNT, CERTIFICATE_NUM, AFFILIATE) values (?,?,?,?,?)");
		ps.setString(1, id);
		ps.setString(2, this.getParentPK().getId());
		//ps.setDouble(3, this.model.getAmount());
		ps.setBigDecimal(3, new java.math.BigDecimal(this.model.getAmount()));
		ps.setString(4, this.model.getCertificateNum());
		ps.setString(5, this.model.getAffiliate().getCode());
		if (ps.executeUpdate() != 1) {
			throw new SQLException("Row not created");
		}
		this.setPK(new PrimaryKey(id));
		ps.close();

		this.unsetModified();
		return this.getPK();
	}

	public void load(Connection conn) throws SQLException {
		PreparedStatement ps = conn.prepareStatement("SELECT agc.AMOUNT, agc.CERTIFICATE_NUM, agc.AFFILIATE, gc.GIVEX_NUM FROM CUST.APPLIED_GIFT_CARD agc, CUST.GIFT_CARD gc WHERE agc.CERTIFICATE_NUM = gc.CERTIFICATE_NUM and agc.ID=?");
		ps.setString(1, this.getPK().getId());
		ResultSet rs = ps.executeQuery();
		if (rs.next()) {
			ErpAffiliate a = ErpAffiliate.getEnum(rs.getString("AFFILIATE"));
			this.model.setAffiliate(a == null ? ErpAffiliate.getEnum(ErpAffiliate.CODE_FD) : a);
			this.model.setAmount(rs.getDouble("AMOUNT"));
			this.model.setCertificateNum(rs.getString("CERTIFICATE_NUM"));
			this.model.setAccountNumber(ErpGiftCardUtil.decryptGivexNum(rs.getString("GIVEX_NUM")));
		} else {
			throw new SQLException("No such ErpAppliedGiftCard PK: " + this.getPK());
		}
		rs.close();
		ps.close();

		this.unsetModified();
	}
}
