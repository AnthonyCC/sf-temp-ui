/* Generated by Together */

package com.freshdirect.customer.ejb;

import java.sql.*;
import com.freshdirect.framework.core.*;
import com.freshdirect.customer.*;
import java.util.List;

/**
 * ErpComplaintLine persistent bean.
 * @version    $Revision$
 * @author     $Author$
 * @stereotype fd-persistent
 */
public class ErpComplaintLinePersistentBean extends ErpReadOnlyPersistentBean {

	private ErpComplaintLineModel model;

	/** Default constructor. */
	public ErpComplaintLinePersistentBean() {
		super();
		this.model = new ErpComplaintLineModel();
	}

	/** Load constructor. */
	public ErpComplaintLinePersistentBean(PrimaryKey pk, Connection conn) throws SQLException {
		this(); 
		this.setPK(pk);
		load(conn);
	}

	/**
	 * Copy constructor, from model.
	 * @param bean ErpComplaintLineModel to copy from
	 */
	public ErpComplaintLinePersistentBean(ErpComplaintLineModel model) {
		super();
		this.setFromModel(model);
	}

	/**
	 * Copy into model.
	 * @return ErpComplaintLineModel object.
	 */
	public ModelI getModel() {
		return this.model.deepCopy();
	}

	/** Copy from model. */
	public void setFromModel(ModelI m) {
		this.model = (ErpComplaintLineModel)m;
		//this.setPK(model.getPK());
		this.setModified();
	}
	
	public void setPK(PrimaryKey pk) {
		model.setPK(pk);
	}
	
	
	public PrimaryKey getPK() {
		
		return model.getPK();
	}
	
	/**
	 * Find ErpComplaintLinePersistentBean objects for a given parent.
	 * @param conn the database connection to operate on
	 * @param parentPK primary key of parent
	 * @return a List of ErpComplaintLinePersistentBean objects (empty if found none).
	 * @throws SQLException if any problems occur talking to the database
	 */
	public static List findByParent(Connection conn, PrimaryKey parentPK) throws SQLException {
		java.util.List lst = new java.util.LinkedList();
		PreparedStatement ps = conn.prepareStatement("SELECT ID FROM CUST.COMPLAINTLINE WHERE COMPLAINT_ID=?");
		ps.setString(1, parentPK.getId());
		ResultSet rs = ps.executeQuery();
		while (rs.next()) {
			ErpComplaintLinePersistentBean bean = new ErpComplaintLinePersistentBean(new PrimaryKey(rs.getString(1)), conn);
			bean.setParentPK(parentPK);
			lst.add(bean);
		}
		rs.close();
		rs = null;
		ps.close();
		ps = null;
		return lst;
	}

	public PrimaryKey create(Connection conn) throws SQLException {
		String id = this.getNextId(conn, "CUST");
		PreparedStatement ps = conn.prepareStatement("INSERT INTO CUST.COMPLAINTLINE (ID, COMPLAINT_ID, AMOUNT, COMPLAINT_DEPT_CODE_ID, COMPLAINT_TYPE, METHOD, LINE_NUMBER, QUANTITY, ORDERLINE_ID) values (?,?,?,?,?,?,?,?,?)");
		ps.setString(1, id);
		ps.setString(2, this.getParentPK().getId());
		ps.setDouble(3, this.model.getAmount());
		ps.setString(4, this.model.getReason().getId());
		ps.setString(5, this.model.getType().getStatusCode());
		ps.setString(6, this.model.getMethod().getStatusCode());
		ps.setString(7, this.model.getComplaintLineNumber());
		ps.setDouble(8, this.model.getQuantity());
		ps.setString(9, this.model.getOrderLineId());
		try {
			if (ps.executeUpdate() != 1) {
				throw new SQLException("Row not created");
			}
			this.setPK(new PrimaryKey(id));
		} catch (SQLException sqle) {
			throw sqle;
		} finally {
			ps.close();
			ps = null;
		}
		// create children here

		this.unsetModified();
		return this.getPK();
	}
    
    private static final String loadQuery =
        "SELECT LINE_NUMBER, ORDERLINE_ID, QUANTITY, AMOUNT, CDC.ID AS REASON_CODE_ID, CD.CODE AS DEPT_CODE, CD.NAME AS DEPT_NAME, CC.NAME AS REASON, COMPLAINT_TYPE, METHOD " +
        "FROM CUST.COMPLAINTLINE CML, CUST.COMPLAINT_DEPT_CODE CDC, CUST.COMPLAINT_DEPT CD, CUST.COMPLAINT_CODE CC " +
        "WHERE CML.COMPLAINT_DEPT_CODE_ID=CDC.ID AND CDC.COMP_DEPT=CD.CODE and CDC.COMP_CODE=CC.CODE AND CML.ID=? ";

	public void load(Connection conn) throws SQLException {
		PreparedStatement ps = conn.prepareStatement(loadQuery);
		ps.setString(1, this.getPK().getId());
		ResultSet rs = ps.executeQuery();
		if (rs.next()) {
			this.model.setComplaintLineNumber(rs.getString("LINE_NUMBER"));
			this.model.setOrderLineId(rs.getString("ORDERLINE_ID"));
			this.model.setQuantity(rs.getDouble("QUANTITY"));
			this.model.setAmount(rs.getDouble("AMOUNT"));
			this.model.setReason(new ErpComplaintReason(rs.getString("REASON_CODE_ID"), rs.getString("DEPT_CODE"),rs.getString("DEPT_NAME"), rs.getString("REASON")));
			this.model.setType(EnumComplaintLineType.getComplaintLineType( rs.getString("COMPLAINT_TYPE")));
			this.model.setMethod(EnumComplaintLineMethod.getComplaintLineMethod( rs.getString("METHOD")));

		} else {
			throw new SQLException("No such ErpComplaintLineLine PK: " + this.getPK());
		}
		rs.close();
		rs = null;
		ps.close();
		ps = null;

		this.unsetModified();
	}

}
