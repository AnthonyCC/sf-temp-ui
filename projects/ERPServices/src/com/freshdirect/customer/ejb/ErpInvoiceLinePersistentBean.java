/* Generated by Together */

package com.freshdirect.customer.ejb;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import com.freshdirect.customer.ErpInvoiceLineModel;
import com.freshdirect.framework.core.ModelI;
import com.freshdirect.framework.core.PrimaryKey;

/**
 * ErpInvoiceLine persistent bean.
 * @version    $Revision$
 * @author     $Author$
 * @stereotype fd-persistent
 */
public class ErpInvoiceLinePersistentBean extends ErpReadOnlyPersistentBean {
	
	private ErpInvoiceLineModel model;
		
	/** Default constructor. */
	public ErpInvoiceLinePersistentBean() {
		super();
		this.model = new ErpInvoiceLineModel();
	}

	/** Load constructor. */
	public ErpInvoiceLinePersistentBean(PrimaryKey pk, Connection conn) throws SQLException {
		this();
		this.setPK(pk);
		load(conn);
	}

	/**
	 * Copy constructor, from model.
	 * @param bean ErpInvoiceLineModel to copy from
	 */
	public ErpInvoiceLinePersistentBean(ErpInvoiceLineModel model) {
		super();
		this.setFromModel(model);
	}
	
	public PrimaryKey getPK() {
		return this.model.getPK();
	}
	
	public void setPK(PrimaryKey pk) {
		this.model.setPK(pk);
	}

	/**
	 * Copy into model.
	 * @return ErpInvoiceLineModel object.
	 */
	public ModelI getModel() {
		return this.model.deepCopy();
	}

	/** Copy from model. */
	public void setFromModel(ModelI model) {
		this.model = (ErpInvoiceLineModel)model;
	}

	/**
	 * Find ErpInvoiceLinePersistentBean objects for a given parent.
	 * @param conn the database connection to operate on
	 * @param parentPK primary key of parent
	 * @return a List of ErpInvoiceLinePersistentBean objects (empty if found none).
	 * @throws SQLException if any problems occur talking to the database
	 */
	public static List findByParent(Connection conn, PrimaryKey parentPK) throws SQLException {
		java.util.List lst = new java.util.LinkedList();
		PreparedStatement ps = conn.prepareStatement("SELECT ID FROM CUST.INVOICELINE WHERE SALESACTION_ID=?");
		ps.setString(1, parentPK.getId());
		ResultSet rs = ps.executeQuery();
		while (rs.next()) {
			ErpInvoiceLinePersistentBean bean = new ErpInvoiceLinePersistentBean(new PrimaryKey(rs.getString(1)), conn);
			bean.setParentPK(parentPK);
			lst.add(bean);
		}
		rs.close();
		rs = null;
		ps.close();
		ps = null;
		return lst;
	}

	public PrimaryKey create(Connection conn) throws SQLException {
		String id = this.getNextId(conn, "CUST");
		PreparedStatement ps = conn.prepareStatement("INSERT INTO CUST.INVOICELINE (ID, SALESACTION_ID, ORDERLINE_NUMBER, ACTUAL_PRICE, ACTUAL_QUANTITY, LINE_TAX, DEPOSIT_VALUE, MATERIAL_NUMBER, ACTUAL_WEIGHT, CUSTOMIZATION_PRICE, ACTUAL_COST, DISCOUNT_AMT,COUPON_DISC_AMT) values (?,?,?,?,?,?,?,?,?,?,?,?,?)");
		ps.setString(1, id);
		ps.setString(2, this.getParentPK().getId());
		ps.setString(3, this.model.getOrderLineNumber());
		ps.setBigDecimal(4, new BigDecimal(String.valueOf(this.model.getActualPrice())));
		ps.setBigDecimal(5, new BigDecimal(String.valueOf(this.model.getQuantity())));
		ps.setBigDecimal(6, new BigDecimal(String.valueOf(this.model.getTaxValue())));
		ps.setBigDecimal(7, new BigDecimal(String.valueOf(this.model.getDepositValue())));
		ps.setString(8, this.model.getMaterialNumber());
		ps.setBigDecimal(9, new BigDecimal(String.valueOf(this.model.getWeight())));
		ps.setBigDecimal(10, new BigDecimal(String.valueOf(this.model.getCustomizationPrice())));
		ps.setBigDecimal(11, new BigDecimal(String.valueOf(this.model.getActualCost())));
		ps.setBigDecimal(12, new BigDecimal(String.valueOf(this.model.getActualDiscountAmount())));
		ps.setBigDecimal(13, new BigDecimal(String.valueOf(this.model.getCouponDiscountAmount())));
		try {
			if (ps.executeUpdate() != 1) {
				throw new SQLException("Row not created");
			}
			this.setPK(new PrimaryKey(id));
		} catch (SQLException sqle) {
			throw sqle;
		} finally {
			ps.close();
			ps = null;
		}
		// create children here

		this.unsetModified();
		return this.getPK();
	}

	public void load(Connection conn) throws SQLException {
		PreparedStatement ps = conn.prepareStatement("SELECT ORDERLINE_NUMBER, ACTUAL_PRICE, ACTUAL_QUANTITY, LINE_TAX, DEPOSIT_VALUE, MATERIAL_NUMBER, ACTUAL_WEIGHT, CUSTOMIZATION_PRICE, ACTUAL_COST, DISCOUNT_AMT, COUPON_DISC_AMT FROM CUST.INVOICELINE WHERE ID=?");
		ps.setString(1, this.getPK().getId());
		ResultSet rs = ps.executeQuery();
		if (rs.next()) {
			this.model.setOrderLineNumber(rs.getString("ORDERLINE_NUMBER"));
			this.model.setPrice(rs.getDouble("ACTUAL_PRICE"));
			this.model.setQuantity(rs.getDouble("ACTUAL_QUANTITY"));
			this.model.setTaxValue(rs.getDouble("LINE_TAX"));
			this.model.setDepositValue(rs.getDouble("DEPOSIT_VALUE"));
			this.model.setMaterialNumber(rs.getString("MATERIAL_NUMBER"));
			this.model.setWeight(rs.getDouble("ACTUAL_WEIGHT"));
			this.model.setCustomizationPrice(rs.getDouble("CUSTOMIZATION_PRICE"));
			this.model.setActualCost(rs.getDouble("ACTUAL_COST"));
			this.model.setActualDiscountAmount(rs.getDouble("DISCOUNT_AMT"));
			this.model.setCouponDiscountAmount(rs.getDouble("COUPON_DISC_AMT"));
			this.model.setPrice(model.getPrice()-model.getActualDiscountAmount());
		} else {
			throw new SQLException("No such ErpInvoiceLine PK: " + this.getPK());
		}
		rs.close();
		ps.close();
		
		this.unsetModified();
	}

}
