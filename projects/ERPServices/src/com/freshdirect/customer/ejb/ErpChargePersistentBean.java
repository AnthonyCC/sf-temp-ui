/* Generated by Together */

package com.freshdirect.customer.ejb;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Iterator;
import java.util.List;

import com.freshdirect.customer.EnumTransactionSource;
import com.freshdirect.customer.EnumTransactionType;
import com.freshdirect.customer.ErpChargeLineModel;
import com.freshdirect.customer.ErpChargeModel;
import com.freshdirect.framework.collection.DependentPersistentBeanList;
import com.freshdirect.framework.core.ModelI;
import com.freshdirect.framework.core.PrimaryKey;


/**
 * ErpCharge persistent bean.
 * @version    $Revision$
 * @author     $Author$
 * @stereotype fd-persistent
 */
public class ErpChargePersistentBean extends ErpTransactionPersistentBean {
	
	private ErpChargeModel model;

	/** Default constructor. */
	public ErpChargePersistentBean() {
		super();
		this.model = new ErpChargeModel();
	}
	
	public ErpChargePersistentBean(PrimaryKey pk){
		this();
		this.setPK(pk);
	}

	/** Load constructor. */
	public ErpChargePersistentBean(PrimaryKey pk, Connection conn) throws SQLException {
		this();
		this.setPK(pk);
		load(conn);
	}

	/**
	 * Copy constructor, from model.
	 * @param bean ErpChargeModel to copy from
	 */
	public ErpChargePersistentBean(ErpChargeModel model) {
		this();
		this.setFromModel(model);
	}
	
	public PrimaryKey getPK() {
		return this.model.getPK();
	}
	
	public void setPK(PrimaryKey pk) {
		this.model.setPK(pk);
	}

	/**
	 * Copy into model.
	 * @return ErpChargeModel object.
	 */
	public ModelI getModel() {
		return this.model.deepCopy();
	}

	/** Copy from model. */
	public void setFromModel(ModelI model) {
		this.model = (ErpChargeModel) model;
	}

	/**
	 * Find ErpChargePersistentBean objects for a given parent.
	 * @param conn the database connection to operate on
	 * @param parentPK primary key of parent
	 * @return a List of ErpComplaintPersistentBean objects (empty if found none).
	 * @throws SQLException if any problems occur talking to the database
	 */
	public static List findByParent(Connection conn, PrimaryKey parentPK) throws SQLException {
		java.util.List lst = new java.util.LinkedList();
		PreparedStatement ps = conn.prepareStatement("SELECT ID FROM CUST.SALESACTION WHERE SALE_ID=?");
		ps.setString(1, parentPK.getId());
		ResultSet rs = ps.executeQuery();
		while (rs.next()) {
			ErpChargePersistentBean bean = new ErpChargePersistentBean(new PrimaryKey(rs.getString(1)), conn);
			bean.setParentPK(parentPK);
			lst.add(bean);
		}
		rs.close();
		rs = null;
		ps.close();
		ps = null;
		return lst;
	}

	public PrimaryKey create(Connection conn) throws SQLException {
		String id = this.getNextId(conn, "CUST");
		/* -------- Commenting out this query until ISSUED_BY column created into DB -------- */
		//PreparedStatement ps = conn.prepareStatement("INSERT INTO SALESACTION (ID, SALE_ID, ACTION_DATE, ACTION_TYPE, SOURCE, AMOUNT, ISSUED_BY) values (?,?,?,?,?,?,?)");
		PreparedStatement ps = conn.prepareStatement("INSERT INTO CUST.SALESACTION (ID, SALE_ID, ACTION_DATE, ACTION_TYPE, SOURCE, AMOUNT, CUSTOMER_ID) values (?,?,?,?,?,?,?)");
		ps.setString(1, id);
		ps.setString(2, this.getParentPK().getId());
		ps.setTimestamp(3, new java.sql.Timestamp(this.model.getTransactionDate().getTime()));
		ps.setString(4, EnumTransactionType.CHARGE.getCode());
		ps.setString(5, this.model.getTransactionSource().getCode() );
		ps.setDouble(6, this.model.getAmount());
		ps.setString(7, this.model.getCustomerId());
		/* -------- Commenting out this line until ISSUED_BY column created into DB -------- */
		//ps.setString(7, this.issuedBy);
		try {
			if (ps.executeUpdate() != 1) {
				throw new SQLException("Row not created");
			}
			this.setPK(new PrimaryKey(id));
		} catch (SQLException sqle) {
			throw sqle;
		} finally {
			ps.close();
			ps = null;
		}
		// create children
		ChargeLineList clList = this.getChargeLinePBList();
		clList.create( conn );

		this.unsetModified();
		return this.getPK();
	}


	public void load(Connection conn) throws SQLException {
		/* -------- Commenting out this query until ISSUED_BY column created into DB -------- */
		//PreparedStatement ps = conn.prepareStatement("SELECT ACTION_DATE, ACTION_TYPE, SOURCE, AMOUNT, ISSUED_BY FROM SALESACTION WHERE ID=?");
		PreparedStatement ps = conn.prepareStatement("SELECT ACTION_DATE, ACTION_TYPE, SOURCE, AMOUNT FROM CUST.SALESACTION WHERE ID=?");
		ps.setString(1, this.getPK().getId());
		ResultSet rs = ps.executeQuery();
		if (rs.next()) {
			this.model.setTransactionDate(rs.getDate("ACTION_DATE"));
			this.model.setTransactionSource(EnumTransactionSource.getTransactionSource( rs.getString("SOURCE") ));
			/* -------- Commenting out this line until ISSUED_BY column created into DB -------- */
			//this.issuedBy = rs.getString("ISSUED_BY");
		} else {
			throw new SQLException("No such ErpCharge PK: " + this.getPK());
		}
		rs.close();
		ps.close();

		// load children
		ChargeLineList clList = new ChargeLineList();
		clList.setParentPK(this.getPK());
		clList.load(conn);
		this.model.setCharges(clList.getModelList());

		this.unsetModified();
	}

	protected ChargeLineList getChargeLinePBList(){
		ChargeLineList clList = new ChargeLineList();
		clList.setParentPK(this.getPK());
		for(Iterator i = this.model.getCharges().iterator(); i.hasNext(); ){
			clList.add(new ErpChargeLinePersistentBean((ErpChargeLineModel)i.next()));
		}
		return clList;
	}

	private static class ChargeLineList extends DependentPersistentBeanList {
	    public void load(Connection conn) throws SQLException {
			this.set(ErpChargeLinePersistentBean.findByParent(conn, (PrimaryKey)ChargeLineList.this.getParentPK()));
	    }
	}

}
