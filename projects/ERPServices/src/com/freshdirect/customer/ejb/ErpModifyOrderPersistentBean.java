/* Generated by Together */

package com.freshdirect.customer.ejb;

import java.sql.*;
import java.util.List;

import com.freshdirect.framework.core.PrimaryKey;
import com.freshdirect.customer.*;


/**
 * ErpCreateOrder persistent bean.
 * @version    $Revision$
 * @author     $Author$
 * @stereotype fd-persistent
 */
public class ErpModifyOrderPersistentBean extends ErpAbstractOrderPersistentBean {

	/**
	 * Constructor for ErpCreateOrderPersistentBean.
	 */
	public ErpModifyOrderPersistentBean() {
		super();
	}
	
	public ErpModifyOrderPersistentBean(PrimaryKey pk){
		super(pk);
	}

	/**
	 * Constructor for ErpCreateOrderPersistentBean.
	 * @param pk
	 * @param conn
	 * @throws SQLException
	 */
	public ErpModifyOrderPersistentBean(PrimaryKey pk, Connection conn) throws SQLException {
		super(pk, conn);
	}

	/**
	 * Constructor for ErpCreateOrderPersistentBean.
	 * @param pk
	 * @param conn
	 * @param rs
	 * @throws SQLException
	 */
	public ErpModifyOrderPersistentBean(PrimaryKey pk, Connection conn, ResultSet rs) throws SQLException {
		super(pk, conn, rs);
	}

	/**
	 * Constructor for ErpCreateOrderPersistentBean.
	 * @param model
	 */
	public ErpModifyOrderPersistentBean(ErpModifyOrderModel model) {
		super(model);
	}

	/**
	 * Find ErpModifyOrderPersistentBean objects for a given parent.
	 * @param conn the database connection to operate on
	 * @param parentPK primary key of parent
	 * @return a List of ErpCreateOrderPersistentBean objects (empty if found none).
	 * @throws SQLException if any problems occur talking to the database
	 */
	public static List findByParent(Connection conn, PrimaryKey parentPK) throws SQLException {
		java.util.List lst = new java.util.LinkedList();
		PreparedStatement ps = conn.prepareStatement("SELECT ID FROM CUST.SALESACTION WHERE SALE_ID=? AND ACTION_TYPE = ?");
		ps.setString(1, parentPK.getId());
		ps.setString(2, EnumTransactionType.MODIFY_ORDER.getCode());
		ResultSet rs = ps.executeQuery();
		while (rs.next()) {
			ErpModifyOrderPersistentBean bean = new ErpModifyOrderPersistentBean(new PrimaryKey(rs.getString(1)), conn);
			bean.setParentPK(parentPK);
			lst.add(bean);
		}
		rs.close();
		rs = null;
		ps.close();
		ps = null;
		return lst;
	}



	/**
	 * @see ErpAbstractOrderPersistentBean#createModel()
	 */
	protected ErpAbstractOrderModel createModel() {
		return new ErpModifyOrderModel();
	}

	/**
	 * @see ErpAbstractOrderPersistentBean#getTransactionType()
	 */
	protected EnumTransactionType getTransactionType() {
		return EnumTransactionType.MODIFY_ORDER;
	}

}
