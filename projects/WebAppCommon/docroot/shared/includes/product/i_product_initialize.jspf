<%!
    java.text.NumberFormat currencyFormatter = java.text.NumberFormat.getCurrencyInstance(Locale.US);
    java.text.DecimalFormat quantityFormatter = new java.text.DecimalFormat("0.##");

    Comparator domainValueComp = new Comparator() {
        public int compare(Object obj1, Object obj2) {
            DomainValue dv1 = (DomainValue) obj1;
            DomainValue dv2 = (DomainValue) obj2;
            int diff = dv1.getPriority() - dv2.getPriority();
            if (diff == 0) {
            	return dv1.toString().compareTo(dv2.toString()) ;
            }
            return diff<0 ? -1 : 1;
        }
    };

    Comparator skuDomainValueComp = new Comparator() {
        public int compare(Object obj1, Object obj2) {
            List<DomainValue> atr1= null;
            List<DomainValue> atr2 =null;
            DomainValue dv1=null;
            DomainValue dv2=null;

			atr1 = ((SkuModel) obj1).getVariationMatrix();
			atr2 = ((SkuModel) obj2).getVariationMatrix();
			dv1 = ((DomainValue) atr1.get(0));
			dv2 = ((DomainValue) atr2.get(0));
			int diff = dv1.getPriority() - dv2.getPriority();
					// sort by secondary domain
			if (diff==0 && (atr1.size() > 1) && (atr2.size() > 1)) {
				dv1 = ((DomainValue) atr1.get(1));
				dv2 = ((DomainValue) atr2.get(1));
				diff = dv1.getPriority() - dv2.getPriority();
				if (diff==0) {
					return dv1.toString().compareTo(dv2.toString()); 
				} 
			} else if (diff==0) {
			   return dv1.toString().compareTo(dv2.toString()) ;
			}
			return diff<0 ? -1 : 1;
        }
    };

    Comparator skuSecDomainValueComp = new Comparator() {
        public int compare(Object obj1, Object obj2) {
            DomainValue dv1 = (DomainValue) ((SkuModel)obj1).getVariationMatrix().get(1);
            DomainValue dv2 = (DomainValue) ((SkuModel)obj2).getVariationMatrix().get(1);
			if (dv1.getPriority() > dv2.getPriority()) {
				return 1;
			} else {
				return (dv1.getPriority() < dv2.getPriority()) ? -1 : 0;
			}
        }
    };

    Comparator variationComparator = new Comparator() {
        public int compare(Object obj1, Object obj2) {
            FDVariation var1 = (FDVariation) obj1;
            FDVariation var2 = (FDVariation) obj2;
            // required before optional
            if (var1.isOptional() && !var2.isOptional()) {
                return 1;
            } else if (var2.isOptional() && !var1.isOptional()) {
                return -1;
            } else if (var1.isOptional() && var2.isOptional()) {
                // menus before checkboxes
                if ("checkbox".equalsIgnoreCase(var1.getDisplayFormat()) && !"checkbox".equalsIgnoreCase(var2.getDisplayFormat())) {
                    return 1;
                } else if ("checkbox".equalsIgnoreCase(var2.getDisplayFormat()) && !"checkbox".equalsIgnoreCase(var1.getDisplayFormat())) {
                    return -1;
                } else {
                    // like elements are ordered by priority
                    if (var1.getAttributeInt("priority", 0) < var2.getAttributeInt("priority", 0)) {
                        return 1;
                    } else if (var1.getAttributeInt("priority", 0) > var2.getAttributeInt("priority", 0)) {
                        return -1;
                    } else {
                        return 0;
                    }
                }
            } else {
                return 0;
            }
        }
    };
%>

<%-- ============================================================================================================================================= --%>

<%
	String popup = "/shared/popup.jsp?catId=" + productNode.getParentNode() + "&prodId=" + productNode;
	EnumPopupType smallPopup = EnumPopupType.getPopupType("small");
	EnumPopupType largePopup = EnumPopupType.getPopupType("large");
	
	MediaI brandLogo = null;
	String brandPopupLink = null;
	String brandName = null;
	
	boolean isWineLayout = EnumProductLayout.NEW_WINE_PRODUCT.equals(productNode.getProductLayout());
	boolean priceShown = false;
	
	int MAX_BRANDS_TO_SHOW = isWineLayout ? 1 : 2;
	
	// get the brand logo, if any.
	List prodBrands = productNode.getDisplayableBrands(MAX_BRANDS_TO_SHOW);
	List brandLogos = new ArrayList();
	List brandPopupLinks = new ArrayList();
	
	Iterator itr = prodBrands.iterator();
	while ( itr.hasNext() ) {
	    BrandModel bm = (BrandModel)itr.next();
	    brandName= bm.getFullName();
	    // attribute will not be null, since the getDisplayableBrands only returns brands that have a brand_logo_small
	    brandLogos.add(bm.getLogoSmall());
	    Html brandAttrib = bm.getPopupContent();
	    
	    brandPopupLink=null;
	    if (brandAttrib!=null) {
	    	TitledMedia tm = (TitledMedia)brandAttrib;
	        EnumPopupType popupType=EnumPopupType.getPopupType(tm.getPopupSize());
	        if (popupType !=null ) {
	            brandPopupLink="javascript:pop('"+response.encodeURL("/brandpop.jsp?brandId="+bm)+"',"+popupType.getHeight()+","+popupType.getWidth()+")";
	        } 
	   } 
	   brandPopupLinks.add(brandPopupLink);
	}
	
	List skus = productNode.getSkus();
	Map shortTermUnavailable = new HashMap();
	// VSZ - is this "sku filtering" neccessary?
	// MR - Yes, this is necessary.  For products with multiple skus, the default sku is the lowest priced sku.
	// If the lowest priced sku is discontinued, this causes errors.  Please leave this turned on.
	ListIterator li = skus.listIterator(); 
	while ( li.hasNext() ) {
	    SkuModel sku = (SkuModel)li.next();
	    if ( sku.isUnavailable() ) {
	            li.remove();
	    } else {
	        Date earliestDate = sku.getEarliestAvailability();
	        Calendar testDate = new GregorianCalendar();
	        testDate.add(Calendar.DATE, 1);
	        // cheat: if no availability indication, show the horizon as the earliest availability
	        if (earliestDate == null) {
	            earliestDate = DateUtil.addDays( DateUtil.truncate(new Date()), ErpServicesProperties.getHorizonDays() );
	        }
	        if(QuickDateFormat.SHORT_DATE_FORMATTER.format(testDate.getTime()).compareTo(QuickDateFormat.SHORT_DATE_FORMATTER.format(earliestDate)) < 0){
	            List domains = sku.getVariationMatrix();
	            StringBuffer key = new StringBuffer();
	            key.append("*");
	            for(Iterator i = domains.iterator(); i.hasNext(); ){
	                DomainValue domainValue = (DomainValue)i.next();
	                key.append(domainValue.getLabel());
	                key.append(", ");
	                key.deleteCharAt(key.length()-2);
	            }
	            key.append(" avail");
	            shortTermUnavailable.put(key.toString(), earliestDate);
	        }
	    }
	}
	int skuSize = skus.size();
%>

