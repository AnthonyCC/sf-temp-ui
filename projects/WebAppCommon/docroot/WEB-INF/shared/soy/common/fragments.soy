{namespace common}

/**
 * @param price
 */
{template .formatDecimalPrice}
	{if $price - floor($price) == 0}
		${floor($price)}
	{elseif $price * 10 - floor($price * 10) == 0}
		${$price}0
	{else}
		${$price}
	{/if}
{/template}

/**
 * @param price
 * @param? wasPrice wasPrice
 * @param? aboutPriceText aboutPriceText
 * @param? scaleUnit
 */
{template .price autoescape="false"}
	{if $price == 0}
		<span class="free-price">FREE</span>
	{elseif $wasPrice}
		<span class="save-price">{call common.formatDecimalPrice}{param price:$price /}{/call}/{$scaleUnit}</span> <s>{call common.formatDecimalPrice}{param price:$wasPrice /}{/call}</s>
	{else}
		{call common.formatDecimalPrice}{param price:$price /}{/call}{if $scaleUnit}/{$scaleUnit}{/if}
	{/if}
	{if $aboutPriceText}
		<span class="about-price">{$aboutPriceText}</span>
	{/if}
{/template}

/**
* @param? fromProducts
* @param? numProducts
* @param productList
* @param? mobWeb
*/
{template .flexProductList autoescape="false"}
{let $len: length($productList) /}
{let $nProducts: $numProducts ? ($numProducts < $len ? $numProducts : $len) : $len /}
{let $fProducts: $fromProducts ? $fromProducts : 0 /}
{let $l: $nProducts - $fProducts /}
<ul class="products flex">
  {for $n in range(0, $nProducts)}
    {let $product: $productList[$fProducts + $n] /}
    {call common.transactionalGridItem}
      {param item:$product /}
      {param mobWeb:$mobWeb /}
    {/call}
  {/for}
</ul>
{/template}

/**
* @param? fromProducts
* @param? numProducts
* @param productList
* @param? showConfig
* @param? abFeatures
* @param? ifSingleUL
* @param? mobWeb
* @param? itemPerLine
*/
{template .productList autoescape="false"}
	{let $ifSingleUL: $ifSingleUL ? $ifSingleUL : ($abFeatures.productCard and $abFeatures.productCard == '2018' ? true : false) /}
	{let $version: $abFeatures ? ($abFeatures.gridlayoutcolumn ? $abFeatures.gridlayoutcolumn : 'default') : 'default' /}
	{let $productCardVersion: $abFeatures ? ($abFeatures.productCard ? $abFeatures.productCard : '2017') : '2017' /}
	{let $itemPerLineFinal: $itemPerLine ? $itemPerLine : (($version == '4_0' or $productCardVersion == '2018') ? 4 : 5) /}
	{let $itemPerLineFinal: $mobWeb ? 2 : $itemPerLineFinal /}
	{call common.fixedProductList data="all"}
		{param itemPerLine:$itemPerLineFinal /}
		{param showConfig: $showConfig /}
		{param fromProducts: $fromProducts /}
		{param numProducts: $numProducts /}
		{param ifSingleUL: $ifSingleUL /}
		{param mobWeb:$mobWeb /}
		{param abFeatures:$abFeatures /}
	{/call}
{/template}

/**
* @param? fromProducts
* @param? numProducts
* @param productList
* @param? itemPerLine
* @param? showConfig
* @param? isHookLogic
* @param? abFeatures
* @param? mobWeb
* @param? ifSingleUL
*/
{template .fixedProductList autoescape="false"}

	{let $ipl: $itemPerLine ? $itemPerLine : 4 /}
	{let $len: length($productList) /}
	{let $nProducts: $numProducts ? ($numProducts < $len ? $numProducts : $len) : $len /}
	{let $fProducts: $fromProducts ? $fromProducts : 0 /}
	{let $l: $nProducts - $fProducts /}
	{let $lines: ceiling($l / $ipl) /}
	{for $line in range(0, $lines)}
		{if (not $ifSingleUL) or ($ifSingleUL and $line == 0)}
			<ul class="products transactional{if (not $ifSingleUL) and $line == $lines - 1} lastLine{/if}" data-ipl="{$ipl}">
		{/if}

  		{for $col in range(0, $ipl)}
      		{if $fProducts + $col + $line * $ipl < $nProducts}
	        	{let $product: $productList[$fProducts + $col + $line * $ipl] /}
	        	{let $xtraClass: 'browseTransactionalProduct fakeRows fakeRow_' + $line + (($isHookLogic == true)? ' regularProduct isHookLogicProduct ' : ' regularProduct ') + ' prod'+$col + (((not $ifSingleUL) and $col==0)?' firstInLine':'')  /}
	        	{if $product.productId == '!_SPACER_!'}
	        		/* SPACER */
	        		<li class="portrait-item data-component="product" data-transactional-trigger="false"><!-- {$product.productId} --></li>
	        	{else}
		        	{call common.transactionalGridItem}
		          		{param item:$product /}
		          		{param extraClass:(($col != ($ipl-1) and $fProducts + $col + $line * $ipl != $nProducts - 1) ? $xtraClass : $xtraClass+' lastInLine') /}
		          		{param showConfig: $showConfig /}
		          		{param mobWeb:$mobWeb /}
						{param abFeatures:$abFeatures /}
		        	{/call}
	        	{/if}
      		{/if}
    	{/for}
    	
		{if (not $ifSingleUL) or ($ifSingleUL and $line == $lines - 1)}
			</ul>
		{/if}
	{/for}
{/template}


/**
* @param? fromProducts
* @param? numProducts
* @param products
* @param? itemPerLine
* @param? mobWeb
*/
{template .simpleFixedProductList autoescape="false"}
	{let $ipl: $itemPerLine ? $itemPerLine : 1 /}
	{let $ipl: $mobWeb ? 2 : $ipl /}
	{let $len: length($products) /}
	{let $nProducts: $numProducts ? ($numProducts < $len ? $numProducts : $len) : $len /}
	{let $fProducts: $fromProducts ? $fromProducts : 0 /}
	{let $l: $nProducts - $fProducts /}
	{call common.fixedProductList}
		{param productList:$products /}
		{param isHookLogic:true /}
		{param numProducts:$nProducts /}
		{param itemPerLine:$ipl /}
		{param ifSingleUL:true /}
		{param mobWeb:$mobWeb /}
	{/call}
{/template}


/**
* @param? prefix
* @param uuid
* @param? catId
* @param? productId
* @param? skuCode
* @param? suffix
* @param? separator
* @param? listId
* @param? originalLineId
*/
{template .getUUID autoescape="false"}
{let $separator: $separator ? $separator : '_' /}
{if $prefix}{$prefix}{$separator}{/if}
{if $uuid}{$uuid}{/if}
{if $catId}{$separator}{$catId}{/if}
{if $productId}{$separator}{$productId}{/if}
{if $skuCode}{$separator}{$skuCode}{/if}
{if $suffix}{$separator}{$suffix}{/if}
{if $listId}{$separator}{$listId}{/if}
{if $originalLineId}{$separator}{$originalLineId}{/if}
{/template}
