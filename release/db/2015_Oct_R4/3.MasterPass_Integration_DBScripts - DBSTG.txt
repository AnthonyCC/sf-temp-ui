CREATE TABLE CUST.EWALLET
(
  "ID"						VARCHAR2(16),
  "EWALLET_TYPE"			VARCHAR2(15) NOT NULL,
  "EWALLET_STATUS"			VARCHAR2(1) NOT NULL, -- E - enable, D - disabled
  "EWALLET_VERIFY"			VARCHAR2(1) NOT NULL, -- Y : Then 0$ auth verification is required, N : Then 0$ auth verification is not required
  "EWALLETM_STATUS" 		VARCHAR2(1) NOT NULL,  -- EWallet Status for Mobile Version
  CONSTRAINT "PK_EWALLET" PRIMARY KEY ("ID")
)
TABLESPACE FDCUSDAT
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

CREATE TABLE CUST.CUST_EWALLET
(
  "ID"						VARCHAR2(16),
  "EWALLET_ID"				VARCHAR2(16) NOT NULL,
  "LONG_ACCESS_TOKEN"		VARCHAR2(200) NOT NULL,
  "CUSTOMER_ID"				VARCHAR2(16) NOT NULL,
   CONSTRAINT "PK_CUST_EWALLET" PRIMARY KEY ("ID")
)
TABLESPACE FDCUSDAT
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;



ALTER TABLE CUST.CUST_EWALLET ADD CONSTRAINT "CUST_EWALLET_FK" FOREIGN KEY (
    "EWALLET_ID"
  )
  REFERENCES CUST."EWALLET" (
    "ID"
);

ALTER TABLE CUST.CUST_EWALLET ADD CONSTRAINT "CUST_CUST_ID_FK" FOREIGN KEY (
    "CUSTOMER_ID"
  )
  REFERENCES CUST.CUSTOMER (
    "ID"
);

CREATE TABLE CUST.EWALLET_TXNOTIFY
(
  "ID"						VARCHAR2(16) NOT NULL,
  "TRANSACTION_ID"			VARCHAR2(100),
  "STATUS"					VARCHAR2(10),
  "EWALLET_ID"				VARCHAR2(16),
  "VENDOR_EWALLET_ID"		VARCHAR2(20),			-- wallet id as provided by MasterPass / Paypal
  "CUSTOMER_ID"				VARCHAR2(16),
  "ORDER_ID"				VARCHAR2(16),
  "NOTIFY_STATUS"			VARCHAR2(10),
  "SALESACTION_ID"			VARCHAR2(100),
  "GATEWAY_ACTIVITY_LOG_ID"	NUMBER,
    CONSTRAINT "PK_EWALLET_TXNOTIFY" PRIMARY KEY ("ID")
)
TABLESPACE FDCUSDAT
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;



ALTER TABLE CUST.EWALLET_TXNOTIFY ADD CONSTRAINT "EWALLET_TXNOTIFY_FK" FOREIGN KEY (
  "EWALLET_ID"
  )
  REFERENCES CUST.EWALLET (
    "ID"
);

ALTER TABLE CUST.PAYMENTINFO_NEW ADD (
    "EWALLET_ID"			VARCHAR2(16),
	"VENDOR_EWALLET_ID"		VARCHAR2(16),
	"EWALLET_TX_ID"			VARCHAR2(100)
);

ALTER TABLE CUST.PAYMENTMETHOD_NEW ADD (
    "EWALLET_ID"			VARCHAR2(16),
	"VENDOR_EWALLET_ID"		VARCHAR2(16)
);

CREATE TABLE MIS.EWALLETAUDITLOG 
   (	
	"ID" 					NUMBER NOT NULL ENABLE, 
	"EWALLET_ID" 			VARCHAR2(16 BYTE) NOT NULL ENABLE, 
	"CUSTOMER_ID" 			VARCHAR2(4000 BYTE), 
	"TRANSACTION_TYPE" 		VARCHAR2(30 BYTE) NOT NULL ENABLE, 
	"CREATION_TIMESTAMP" 	TIMESTAMP, 
	"STATUS" 				VARCHAR2(10 BYTE), 
	"ORDER_ID" 				VARCHAR2(4000 BYTE), 
	"TRANSACTION_ID" 		VARCHAR2(4000 BYTE),
	"REQUEST" 				clob, 
	"RESPONSE" 				clob
   ) 
TABLESPACE FDCUSDAT
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;



ALTER TABLE MIS.GATEWAY_ACTIVITY_LOG ADD "EWALLET_ID" VARCHAR2(16 BYTE);
ALTER TABLE MIS.GATEWAY_ACTIVITY_LOG ADD (
    "EWALLET_TX_ID"			VARCHAR2(100)
);

ALTER TABLE CUST.PAYMENTMETHOD_NEW ADD (
    "EWALLET_TX_ID"			VARCHAR2(100)
);

CREATE SEQUENCE  MIS.EWALLETAUDITLOG_SEQUENCE  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 20631 CACHE 20 NOORDER  NOCYCLE ;  


-- recreate existing Views

CREATE OR REPLACE VIEW CUST.PAYMENTINFO_IDV ("NAME", "ACCOUNT_NUMBER", "EXPIRATION_DATE", "CARD_TYPE", "ADDRESS1", "ADDRESS2", "APARTMENT", "CITY", "STATE", "ZIP_CODE", "COUNTRY", "SALESACTION_ID", "BILLING_REF", "ON_FD_ACCOUNT", "REFERENCED_ORDER", "ABA_ROUTE_NUMBER", "PAYMENT_METHOD_TYPE", "BANK_NAME", "BANK_ACCOUNT_TYPE", "ING_ROW_ID", "PROFILE_ID", "ACCOUNT_NUM_MASKED", "BEST_NUM_BILLING_INQ", "EWALLET_ID", "VENDOR_EWALLET_ID", "EWALLET_TX_ID") AS 
SELECT "NAME",
        INGRIAN.IngFastDecryptOp ("ACCOUNT_NUMBER_NEW",
                                  'CUST',
                                  'PAYMENTINFO_NEW',
                                  'ACCOUNT_NUMBER_NEW',
                                  '7AE223F3668C4C9CE2994B04E9774304')
           "ACCOUNT_NUMBER",
        "EXPIRATION_DATE",
        "CARD_TYPE",
        "ADDRESS1",
        "ADDRESS2",
        "APARTMENT",
        "CITY",
        "STATE",
        "ZIP_CODE",
        "COUNTRY",
        "SALESACTION_ID",
        "BILLING_REF",
        "ON_FD_ACCOUNT",
        "REFERENCED_ORDER",
        "ABA_ROUTE_NUMBER",
        "PAYMENT_METHOD_TYPE",
        "BANK_NAME",
        "BANK_ACCOUNT_TYPE",
        "ING_ROW_ID",
        "PROFILE_ID",
        "ACCOUNT_NUM_MASKED",
        "BEST_NUM_BILLING_INQ",
        "EWALLET_ID",
        "VENDOR_EWALLET_ID",
		"EWALLET_TX_ID"
   FROM CUST.PAYMENTINFO_NEW;
 / 
 
CREATE OR REPLACE VIEW CUST.PAYMENTINFO ("NAME", "ACCOUNT_NUMBER", "EXPIRATION_DATE", "CARD_TYPE", "ADDRESS1", "ADDRESS2", "APARTMENT", "CITY", "STATE", "ZIP_CODE", "COUNTRY", "SALESACTION_ID", "BILLING_REF", "ON_FD_ACCOUNT", "REFERENCED_ORDER", "ABA_ROUTE_NUMBER", "PAYMENT_METHOD_TYPE", "BANK_NAME", "BANK_ACCOUNT_TYPE", "PROFILE_ID", "ACCOUNT_NUM_MASKED", "BEST_NUM_BILLING_INQ", "EWALLET_ID", "VENDOR_EWALLET_ID", "EWALLET_TX_ID") AS 
SELECT "NAME",
	  "ACCOUNT_NUMBER",
	  "EXPIRATION_DATE",
	  "CARD_TYPE",
	  "ADDRESS1",
	  "ADDRESS2",
	  "APARTMENT",
	  "CITY",
	  "STATE",
	  "ZIP_CODE",
	  "COUNTRY",
	  "SALESACTION_ID",
	  "BILLING_REF",
	  "ON_FD_ACCOUNT",
	  "REFERENCED_ORDER",
	  "ABA_ROUTE_NUMBER",
	  "PAYMENT_METHOD_TYPE",
	  "BANK_NAME",
	  "BANK_ACCOUNT_TYPE",
	  "PROFILE_ID",
	  "ACCOUNT_NUM_MASKED",
	  "BEST_NUM_BILLING_INQ",
	  "EWALLET_ID",
      "VENDOR_EWALLET_ID",
	  "EWALLET_TX_ID"
 FROM CUST.PAYMENTINFO_IDV;
/

-- Trigger on CUST.PAYMENTINFO_INS_TRIG
create or replace TRIGGER CUST.PAYMENTINFO_INS_TRIG INSTEAD OF INSERT ON CUST.PAYMENTINFO_IDV REFERENCING NEW AS NEW OLD AS OLD  FOR EACH ROW
DECLARE  CHECK_61 VARCHAR2(25); BEGIN  SELECT :NEW."ACCOUNT_NUMBER" INTO CHECK_61 FROM DUAL; INSERT INTO CUST.PAYMENTINFO_NEW ("NAME","ACCOUNT_NUMBER","ACCOUNT_NUMBER_NEW","EXPIRATION_DATE","CARD_TYPE","ADDRESS1","ADDRESS2","APARTMENT","CITY","STATE","ZIP_CODE","COUNTRY","SALESACTION_ID","BILLING_REF","ON_FD_ACCOUNT","REFERENCED_ORDER","ABA_ROUTE_NUMBER","PAYMENT_METHOD_TYPE","BANK_NAME","BANK_ACCOUNT_TYPE","ING_ROW_ID","PROFILE_ID","ACCOUNT_NUM_MASKED", "EWALLET_ID", "VENDOR_EWALLET_ID", "EWALLET_TX_ID" ) VALUES ( :NEW."NAME",' ',INGRIAN.IngFastEncryptVarcharByName(:NEW."ACCOUNT_NUMBER", 'CUST', 'PAYMENTINFO', 'ACCOUNT_NUMBER', '7AE223F3668C4C9CE2994B04E9774304'),:NEW."EXPIRATION_DATE",:NEW."CARD_TYPE",:NEW."ADDRESS1",:NEW."ADDRESS2",:NEW."APARTMENT",:NEW."CITY",:NEW."STATE",:NEW."ZIP_CODE",:NEW."COUNTRY",:NEW."SALESACTION_ID",:NEW."BILLING_REF",:NEW."ON_FD_ACCOUNT",:NEW."REFERENCED_ORDER",:NEW."ABA_ROUTE_NUMBER",:NEW."PAYMENT_METHOD_TYPE",:NEW."BANK_NAME",:NEW."BANK_ACCOUNT_TYPE",CUST.ING_SEQ_61.NEXTVAL,:NEW."PROFILE_ID",:NEW."ACCOUNT_NUM_MASKED", :NEW."EWALLET_ID", :NEW."VENDOR_EWALLET_ID", :NEW."EWALLET_TX_ID");  END;
/

create or replace TRIGGER CUST.PAYMENTINFO_UPD_TRIG INSTEAD OF UPDATE ON CUST.PAYMENTINFO_IDV REFERENCING NEW AS NEW OLD AS OLD  FOR EACH ROW
DECLARE  CHECK_61 VARCHAR2(25); BEGIN  SELECT :NEW."ACCOUNT_NUMBER" INTO CHECK_61 FROM DUAL; UPDATE CUST.PAYMENTINFO_NEW SET "NAME" = :NEW."NAME" , "ACCOUNT_NUMBER_NEW" = decode (:NEW."ACCOUNT_NUMBER" , :OLD."ACCOUNT_NUMBER" , "ACCOUNT_NUMBER_NEW" , INGRIAN.IngFastEncryptVarcharByName(:NEW."ACCOUNT_NUMBER", 'CUST', 'PAYMENTINFO', 'ACCOUNT_NUMBER', '7AE223F3668C4C9CE2994B04E9774304') )  , "EXPIRATION_DATE" = :NEW."EXPIRATION_DATE" , "CARD_TYPE" = :NEW."CARD_TYPE" , "ADDRESS1" = :NEW."ADDRESS1" , "ADDRESS2" = :NEW."ADDRESS2" , "APARTMENT" = :NEW."APARTMENT" , "CITY" = :NEW."CITY" , "STATE" = :NEW."STATE" , "ZIP_CODE" = :NEW."ZIP_CODE" , "COUNTRY" = :NEW."COUNTRY" , "SALESACTION_ID" = :NEW."SALESACTION_ID" , "BILLING_REF" = :NEW."BILLING_REF" , "ON_FD_ACCOUNT" = :NEW."ON_FD_ACCOUNT" , "REFERENCED_ORDER" = :NEW."REFERENCED_ORDER" , "ABA_ROUTE_NUMBER" = :NEW."ABA_ROUTE_NUMBER" , "PAYMENT_METHOD_TYPE" = :NEW."PAYMENT_METHOD_TYPE" , "BANK_NAME" = :NEW."BANK_NAME" , "BANK_ACCOUNT_TYPE" = :NEW."BANK_ACCOUNT_TYPE" , "PROFILE_ID" = :NEW."PROFILE_ID" , "ACCOUNT_NUM_MASKED" = :NEW."ACCOUNT_NUM_MASKED" , "EWALLET_ID" = :NEW."EWALLET_ID", "VENDOR_EWALLET_ID" = :NEW."VENDOR_EWALLET_ID", "EWALLET_TX_ID" = :NEW."EWALLET_TX_ID" WHERE ING_ROW_ID = :OLD.ING_ROW_ID; END;
/


CREATE OR REPLACE VIEW CUST.PAYMENTMETHOD_IDV ("ID", "CUSTOMER_ID", "NAME", "ACCOUNT_NUMBER", "EXPIRATION_DATE", "CARD_TYPE", "ADDRESS1", "ADDRESS2", "APARTMENT", "CITY", "STATE", "ZIP_CODE", "COUNTRY", "ABA_ROUTE_NUMBER", "PAYMENT_METHOD_TYPE", "BANK_NAME", "BANK_ACCOUNT_TYPE", "ING_ROW_ID", "AVS_FAILED", "BYPASS_AVS_CHECK", "IS_VERIFIED", "IS_ADDRESS_VERIFIED", "IS_ZIP_VERIFIED", "IS_CVV_VERIFIED", "PROFILE_ID", "ACCOUNT_NUM_MASKED", "BEST_NUM_BILLING_INQ", "EWALLET_ID", "VENDOR_EWALLET_ID", "EWALLET_TX_ID" ) AS 
SELECT "ID", "CUSTOMER_ID", "NAME", INGRIAN.IngFastDecryptOp("ACCOUNT_NUMBER_NEW", 'CUST', 'PAYMENTMETHOD_NEW', 'ACCOUNT_NUMBER_NEW', '2931465A569A9B13D69A63813806E73F')"ACCOUNT_NUMBER", "EXPIRATION_DATE", "CARD_TYPE", "ADDRESS1", "ADDRESS2", "APARTMENT", "CITY", "STATE", "ZIP_CODE", "COUNTRY", "ABA_ROUTE_NUMBER", "PAYMENT_METHOD_TYPE", "BANK_NAME", "BANK_ACCOUNT_TYPE", "ING_ROW_ID", "AVS_FAILED", "BYPASS_AVS_CHECK", "IS_VERIFIED", "IS_ADDRESS_VERIFIED", "IS_ZIP_VERIFIED", "IS_CVV_VERIFIED", "PROFILE_ID", "ACCOUNT_NUM_MASKED", "BEST_NUM_BILLING_INQ", "EWALLET_ID", "VENDOR_EWALLET_ID", "EWALLET_TX_ID"  FROM CUST.PAYMENTMETHOD_NEW;
/

CREATE OR REPLACE VIEW CUST.PAYMENTMETHOD ("ID", "CUSTOMER_ID", "NAME", "ACCOUNT_NUMBER", "EXPIRATION_DATE", "CARD_TYPE", "ADDRESS1", "ADDRESS2", "APARTMENT", "CITY", "STATE", "ZIP_CODE", "COUNTRY", "ABA_ROUTE_NUMBER", "PAYMENT_METHOD_TYPE", "BANK_NAME", "BANK_ACCOUNT_TYPE", "AVS_FAILED", "BYPASS_AVS_CHECK", "IS_VERIFIED", "IS_ADDRESS_VERIFIED", "IS_ZIP_VERIFIED", "IS_CVV_VERIFIED", "PROFILE_ID", "ACCOUNT_NUM_MASKED", "BEST_NUM_BILLING_INQ", "EWALLET_ID", "VENDOR_EWALLET_ID", "EWALLET_TX_ID" ) AS 
SELECT "ID" ,"CUSTOMER_ID" ,"NAME" ,"ACCOUNT_NUMBER" ,"EXPIRATION_DATE" ,"CARD_TYPE" ,"ADDRESS1" ,"ADDRESS2" ,"APARTMENT" ,"CITY" ,"STATE" ,"ZIP_CODE" ,"COUNTRY" ,"ABA_ROUTE_NUMBER" ,"PAYMENT_METHOD_TYPE" ,"BANK_NAME" ,"BANK_ACCOUNT_TYPE" ,"AVS_FAILED" ,"BYPASS_AVS_CHECK" ,"IS_VERIFIED" ,"IS_ADDRESS_VERIFIED" ,"IS_ZIP_VERIFIED" ,"IS_CVV_VERIFIED" ,"PROFILE_ID" ,"ACCOUNT_NUM_MASKED" ,"BEST_NUM_BILLING_INQ", "EWALLET_ID", "VENDOR_EWALLET_ID", "EWALLET_TX_ID" FROM CUST.PAYMENTMETHOD_IDV;
/

create or replace 
TRIGGER CUST.PAYMENTMETHOD_INS_TRIG INSTEAD OF INSERT ON CUST.PAYMENTMETHOD_IDV REFERENCING NEW AS NEW OLD AS OLD  FOR EACH ROW  DECLARE  CHECK_101 VARCHAR2(25); BEGIN  SELECT :NEW."ACCOUNT_NUMBER" INTO CHECK_101 FROM DUAL; INSERT INTO CUST.PAYMENTMETHOD_NEW ("ID","CUSTOMER_ID","NAME","ACCOUNT_NUMBER","ACCOUNT_NUMBER_NEW","EXPIRATION_DATE","CARD_TYPE","ADDRESS1","ADDRESS2","APARTMENT","CITY","STATE","ZIP_CODE","COUNTRY","ABA_ROUTE_NUMBER","PAYMENT_METHOD_TYPE","BANK_NAME","BANK_ACCOUNT_TYPE","ING_ROW_ID","AVS_FAILED","BYPASS_AVS_CHECK","IS_VERIFIED","IS_ADDRESS_VERIFIED","IS_ZIP_VERIFIED","IS_CVV_VERIFIED","PROFILE_ID","ACCOUNT_NUM_MASKED","BEST_NUM_BILLING_INQ", "EWALLET_ID", "VENDOR_EWALLET_ID", "EWALLET_TX_ID" ) VALUES ( :NEW."ID",:NEW."CUSTOMER_ID",:NEW."NAME",' ',INGRIAN.IngFastEncryptVarcharByName(:NEW."ACCOUNT_NUMBER", 'CUST', 'PAYMENTMETHOD', 'ACCOUNT_NUMBER', '2931465A569A9B13D69A63813806E73F'),:NEW."EXPIRATION_DATE",:NEW."CARD_TYPE",:NEW."ADDRESS1",:NEW."ADDRESS2",:NEW."APARTMENT",:NEW."CITY",:NEW."STATE",:NEW."ZIP_CODE",:NEW."COUNTRY",:NEW."ABA_ROUTE_NUMBER",:NEW."PAYMENT_METHOD_TYPE",:NEW."BANK_NAME",:NEW."BANK_ACCOUNT_TYPE",CUST.ING_SEQ_101.NEXTVAL,:NEW."AVS_FAILED",:NEW."BYPASS_AVS_CHECK",:NEW."IS_VERIFIED",:NEW."IS_ADDRESS_VERIFIED",:NEW."IS_ZIP_VERIFIED",:NEW."IS_CVV_VERIFIED",:NEW."PROFILE_ID",:NEW."ACCOUNT_NUM_MASKED",:NEW."BEST_NUM_BILLING_INQ",:NEW."EWALLET_ID", :NEW."VENDOR_EWALLET_ID", :NEW."EWALLET_TX_ID" );  END;
/

create or replace TRIGGER CUST.PAYMENTMETHOD_UPD_TRIG INSTEAD OF UPDATE ON 
CUST.PAYMENTMETHOD_IDV REFERENCING NEW AS NEW OLD AS OLD  FOR EACH ROW  DECLARE  
CHECK_101 VARCHAR2(25); BEGIN  SELECT :NEW."ACCOUNT_NUMBER" INTO CHECK_101 FROM DUAL; 
UPDATE CUST.PAYMENTMETHOD_NEW SET "ID" = :NEW."ID" , 
"CUSTOMER_ID" = :NEW."CUSTOMER_ID" , "NAME" = :NEW."NAME" , 
"ACCOUNT_NUMBER_NEW" = decode (:NEW."ACCOUNT_NUMBER" , :OLD."ACCOUNT_NUMBER" , 
"ACCOUNT_NUMBER_NEW" , INGRIAN.IngFastEncryptVarcharByName(:NEW."ACCOUNT_NUMBER", 'CUST', 'PAYMENTMETHOD', 'ACCOUNT_NUMBER', '2931465A569A9B13D69A63813806E73F') )  , 
"EXPIRATION_DATE" = :NEW."EXPIRATION_DATE" , 
"CARD_TYPE" = :NEW."CARD_TYPE" , "ADDRESS1" = :NEW."ADDRESS1" , 
"ADDRESS2" = :NEW."ADDRESS2" , "APARTMENT" = :NEW."APARTMENT" , 
"CITY" = :NEW."CITY" , "STATE" = :NEW."STATE" , "ZIP_CODE" = :NEW."ZIP_CODE" , "COUNTRY" = :NEW."COUNTRY" , 
"ABA_ROUTE_NUMBER" = :NEW."ABA_ROUTE_NUMBER" , "PAYMENT_METHOD_TYPE" = :NEW."PAYMENT_METHOD_TYPE" , 
"BANK_NAME" = :NEW."BANK_NAME" , "BANK_ACCOUNT_TYPE" = :NEW."BANK_ACCOUNT_TYPE" , "AVS_FAILED" = :NEW."AVS_FAILED" , 
"BYPASS_AVS_CHECK" = :NEW."BYPASS_AVS_CHECK" , "IS_VERIFIED" = :NEW."IS_VERIFIED" , "IS_ADDRESS_VERIFIED" = :NEW."IS_ADDRESS_VERIFIED" , 
"IS_ZIP_VERIFIED" = :NEW."IS_ZIP_VERIFIED" , "IS_CVV_VERIFIED" = :NEW."IS_CVV_VERIFIED" , "PROFILE_ID" = :NEW."PROFILE_ID" , 
"ACCOUNT_NUM_MASKED" = :NEW."ACCOUNT_NUM_MASKED" , "BEST_NUM_BILLING_INQ" = :NEW."BEST_NUM_BILLING_INQ" ,
"EWALLET_ID" = :NEW."EWALLET_ID", "VENDOR_EWALLET_ID" = :NEW."VENDOR_EWALLET_ID", "EWALLET_TX_ID" = :NEW."EWALLET_TX_ID"
WHERE ING_ROW_ID = :OLD.ING_ROW_ID;  END;
/

CREATE INDEX MIS.IDX_EWALLETAUDITLOG_TIMESTAMP ON MIS.EWALLETAUDITLOG ("CREATION_TIMESTAMP") tablespace FDCUSIDX;
 
--Index added by Kasi Review
 
--drop INDEX IDX_EWALLET_CUSTOMER;
--drop INDEX IDX_EWALLETNOTIFY;
--drop INDEX IDX_EWALLETAUDITLOG;
   
CREATE INDEX CUST.IDX_EWALLET_CUSTOMER ON CUST.CUST_EWALLET(CUSTOMER_ID) tablespace FDCUSIDX;

CREATE INDEX CUST.IDX_EWALLETNOTIFY ON CUST.EWALLET_TXNOTIFY(CUSTOMER_ID,EWALLET_ID) tablespace FDCUSIDX;

CREATE INDEX CUST.IDX_EWALLETAUDITLOG ON MIS.EWALLETAUDITLOG(CUSTOMER_ID,EWALLET_ID,CREATION_TIMESTAMP) tablespace FDCUSIDX;  
--Ends
 
-- Insert Into EWALLET table
INSERT INTO CUST.EWALLET(ID, EWALLET_TYPE, EWALLET_STATUS,EWALLET_VERIFY,EWALLETM_STATUS) VALUES('1', 'MP', 'D', 'Y', 'Y');
  

GRANT DELETE, INSERT, SELECT, UPDATE ON CUST.EWALLET TO FDSTORE_STSTG01;
GRANT DELETE, INSERT, SELECT, UPDATE ON CUST.CUST_EWALLET TO FDSTORE_STSTG01;
GRANT DELETE, INSERT, SELECT, UPDATE ON CUST.EWALLET_TXNOTIFY TO FDSTORE_STSTG01;
GRANT DELETE, INSERT, SELECT, UPDATE ON MIS.EWALLETAUDITLOG TO FDSTORE_STSTG01;
GRANT SELECT ON MIS.EWALLETAUDITLOG_SEQUENCE TO FDSTORE_STSTG01;
COMMIT;